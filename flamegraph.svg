<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="598" onload="init(evt)" viewBox="0 0 1200 598" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="598" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="581.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="581.00"> </text><svg id="frames" x="10" width="1180" total_samples="968"><g><title>`0x7FFB749FCC70 (2 samples, 0.21%)</title><rect x="0.0000%" y="533" width="0.2066%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="2"/><text x="0.2500%" y="543.50"></text></g><g><title>`0x7FFB749FD1B0 (1 samples, 0.10%)</title><rect x="0.2066%" y="501" width="0.1033%" height="15" fill="rgb(217,0,24)" fg:x="2" fg:w="1"/><text x="0.4566%" y="511.50"></text></g><g><title>`0x7FFB749FEA11 (1 samples, 0.10%)</title><rect x="0.2066%" y="485" width="0.1033%" height="15" fill="rgb(221,193,54)" fg:x="2" fg:w="1"/><text x="0.4566%" y="495.50"></text></g><g><title>`0x7FFB749DB44D (1 samples, 0.10%)</title><rect x="0.2066%" y="469" width="0.1033%" height="15" fill="rgb(248,212,6)" fg:x="2" fg:w="1"/><text x="0.4566%" y="479.50"></text></g><g><title>`0x7FFB749DD37A (1 samples, 0.10%)</title><rect x="0.2066%" y="453" width="0.1033%" height="15" fill="rgb(208,68,35)" fg:x="2" fg:w="1"/><text x="0.4566%" y="463.50"></text></g><g><title>`0x7FFB749F4D2F (1 samples, 0.10%)</title><rect x="0.2066%" y="437" width="0.1033%" height="15" fill="rgb(232,128,0)" fg:x="2" fg:w="1"/><text x="0.4566%" y="447.50"></text></g><g><title>`0x7FFB749F4B80 (1 samples, 0.10%)</title><rect x="0.2066%" y="421" width="0.1033%" height="15" fill="rgb(207,160,47)" fg:x="2" fg:w="1"/><text x="0.4566%" y="431.50"></text></g><g><title>`0x7FFB749F4810 (1 samples, 0.10%)</title><rect x="0.2066%" y="405" width="0.1033%" height="15" fill="rgb(228,23,34)" fg:x="2" fg:w="1"/><text x="0.4566%" y="415.50"></text></g><g><title>`0x7FFB749F4739 (1 samples, 0.10%)</title><rect x="0.2066%" y="389" width="0.1033%" height="15" fill="rgb(218,30,26)" fg:x="2" fg:w="1"/><text x="0.4566%" y="399.50"></text></g><g><title>`0x7FFB749F38C0 (1 samples, 0.10%)</title><rect x="0.2066%" y="373" width="0.1033%" height="15" fill="rgb(220,122,19)" fg:x="2" fg:w="1"/><text x="0.4566%" y="383.50"></text></g><g><title>`0x7FFB74A2D612 (1 samples, 0.10%)</title><rect x="0.2066%" y="357" width="0.1033%" height="15" fill="rgb(250,228,42)" fg:x="2" fg:w="1"/><text x="0.4566%" y="367.50"></text></g><g><title>`0x7FFB74A4D734 (1 samples, 0.10%)</title><rect x="0.2066%" y="341" width="0.1033%" height="15" fill="rgb(240,193,28)" fg:x="2" fg:w="1"/><text x="0.4566%" y="351.50"></text></g><g><title>`0x7FFB74A10128 (1 samples, 0.10%)</title><rect x="0.3099%" y="453" width="0.1033%" height="15" fill="rgb(216,20,37)" fg:x="3" fg:w="1"/><text x="0.5599%" y="463.50"></text></g><g><title>`0x7FFB749E26C6 (1 samples, 0.10%)</title><rect x="0.3099%" y="437" width="0.1033%" height="15" fill="rgb(206,188,39)" fg:x="3" fg:w="1"/><text x="0.5599%" y="447.50"></text></g><g><title>`0x7FFB74A103C1 (1 samples, 0.10%)</title><rect x="0.4132%" y="421" width="0.1033%" height="15" fill="rgb(217,207,13)" fg:x="4" fg:w="1"/><text x="0.6632%" y="431.50"></text></g><g><title>`0x7FFB74A114C2 (1 samples, 0.10%)</title><rect x="0.4132%" y="405" width="0.1033%" height="15" fill="rgb(231,73,38)" fg:x="4" fg:w="1"/><text x="0.6632%" y="415.50"></text></g><g><title>`0x7FFB749C15D0 (1 samples, 0.10%)</title><rect x="0.4132%" y="389" width="0.1033%" height="15" fill="rgb(225,20,46)" fg:x="4" fg:w="1"/><text x="0.6632%" y="399.50"></text></g><g><title>`0x7FFB749C17B1 (1 samples, 0.10%)</title><rect x="0.4132%" y="373" width="0.1033%" height="15" fill="rgb(210,31,41)" fg:x="4" fg:w="1"/><text x="0.6632%" y="383.50"></text></g><g><title>`0x7FFB74A1D700 (1 samples, 0.10%)</title><rect x="0.4132%" y="357" width="0.1033%" height="15" fill="rgb(221,200,47)" fg:x="4" fg:w="1"/><text x="0.6632%" y="367.50"></text></g><g><title>`0x7FFB74A4C41B (1 samples, 0.10%)</title><rect x="0.4132%" y="341" width="0.1033%" height="15" fill="rgb(226,26,5)" fg:x="4" fg:w="1"/><text x="0.6632%" y="351.50"></text></g><g><title>`0x7FFB74A4C171 (1 samples, 0.10%)</title><rect x="0.4132%" y="325" width="0.1033%" height="15" fill="rgb(249,33,26)" fg:x="4" fg:w="1"/><text x="0.6632%" y="335.50"></text></g><g><title>`0x7FFB74A4C2C3 (1 samples, 0.10%)</title><rect x="0.4132%" y="309" width="0.1033%" height="15" fill="rgb(235,183,28)" fg:x="4" fg:w="1"/><text x="0.6632%" y="319.50"></text></g><g><title>`0x7FFB74ACB0ED (1 samples, 0.10%)</title><rect x="0.4132%" y="293" width="0.1033%" height="15" fill="rgb(221,5,38)" fg:x="4" fg:w="1"/><text x="0.6632%" y="303.50"></text></g><g><title>`0x7FFB74A4C5DB (1 samples, 0.10%)</title><rect x="0.4132%" y="277" width="0.1033%" height="15" fill="rgb(247,18,42)" fg:x="4" fg:w="1"/><text x="0.6632%" y="287.50"></text></g><g><title>`0x7FFB74A50164 (1 samples, 0.10%)</title><rect x="0.4132%" y="261" width="0.1033%" height="15" fill="rgb(241,131,45)" fg:x="4" fg:w="1"/><text x="0.6632%" y="271.50"></text></g><g><title>`0x7FFB74A10BD6 (2 samples, 0.21%)</title><rect x="0.4132%" y="437" width="0.2066%" height="15" fill="rgb(249,31,29)" fg:x="4" fg:w="2"/><text x="0.6632%" y="447.50"></text></g><g><title>`0x7FFB74A10516 (1 samples, 0.10%)</title><rect x="0.5165%" y="421" width="0.1033%" height="15" fill="rgb(225,111,53)" fg:x="5" fg:w="1"/><text x="0.7665%" y="431.50"></text></g><g><title>`0x7FFB74A106F7 (1 samples, 0.10%)</title><rect x="0.5165%" y="405" width="0.1033%" height="15" fill="rgb(238,160,17)" fg:x="5" fg:w="1"/><text x="0.7665%" y="415.50"></text></g><g><title>`0x7FFB74A1086B (1 samples, 0.10%)</title><rect x="0.5165%" y="389" width="0.1033%" height="15" fill="rgb(214,148,48)" fg:x="5" fg:w="1"/><text x="0.7665%" y="399.50"></text></g><g><title>`0x7FFB74A4DC94 (1 samples, 0.10%)</title><rect x="0.5165%" y="373" width="0.1033%" height="15" fill="rgb(232,36,49)" fg:x="5" fg:w="1"/><text x="0.7665%" y="383.50"></text></g><g><title>`0x7FFB74A1118C (1 samples, 0.10%)</title><rect x="0.6198%" y="421" width="0.1033%" height="15" fill="rgb(209,103,24)" fg:x="6" fg:w="1"/><text x="0.8698%" y="431.50"></text></g><g><title>`0x7FFB74A4DB54 (1 samples, 0.10%)</title><rect x="0.6198%" y="405" width="0.1033%" height="15" fill="rgb(229,88,8)" fg:x="6" fg:w="1"/><text x="0.8698%" y="415.50"></text></g><g><title>`0x7FFB749FD79A (5 samples, 0.52%)</title><rect x="0.3099%" y="501" width="0.5165%" height="15" fill="rgb(213,181,19)" fg:x="3" fg:w="5"/><text x="0.5599%" y="511.50"></text></g><g><title>`0x7FFB74A13720 (5 samples, 0.52%)</title><rect x="0.3099%" y="485" width="0.5165%" height="15" fill="rgb(254,191,54)" fg:x="3" fg:w="5"/><text x="0.5599%" y="495.50"></text></g><g><title>`0x7FFB74A100D3 (5 samples, 0.52%)</title><rect x="0.3099%" y="469" width="0.5165%" height="15" fill="rgb(241,83,37)" fg:x="3" fg:w="5"/><text x="0.5599%" y="479.50"></text></g><g><title>`0x7FFB74A10160 (4 samples, 0.41%)</title><rect x="0.4132%" y="453" width="0.4132%" height="15" fill="rgb(233,36,39)" fg:x="4" fg:w="4"/><text x="0.6632%" y="463.50"></text></g><g><title>`0x7FFB74A10CA0 (2 samples, 0.21%)</title><rect x="0.6198%" y="437" width="0.2066%" height="15" fill="rgb(226,3,54)" fg:x="6" fg:w="2"/><text x="0.8698%" y="447.50"></text></g><g><title>`0x7FFB74A11261 (1 samples, 0.10%)</title><rect x="0.7231%" y="421" width="0.1033%" height="15" fill="rgb(245,192,40)" fg:x="7" fg:w="1"/><text x="0.9731%" y="431.50"></text></g><g><title>`0x7FFB74A4D6D4 (1 samples, 0.10%)</title><rect x="0.7231%" y="405" width="0.1033%" height="15" fill="rgb(238,167,29)" fg:x="7" fg:w="1"/><text x="0.9731%" y="415.50"></text></g><g><title>`0x7FFB74A10F02 (1 samples, 0.10%)</title><rect x="0.8264%" y="341" width="0.1033%" height="15" fill="rgb(232,182,51)" fg:x="8" fg:w="1"/><text x="1.0764%" y="351.50"></text></g><g><title>`0x7FFB74A106F7 (1 samples, 0.10%)</title><rect x="0.8264%" y="325" width="0.1033%" height="15" fill="rgb(231,60,39)" fg:x="8" fg:w="1"/><text x="1.0764%" y="335.50"></text></g><g><title>`0x7FFB74A1086B (1 samples, 0.10%)</title><rect x="0.8264%" y="309" width="0.1033%" height="15" fill="rgb(208,69,12)" fg:x="8" fg:w="1"/><text x="1.0764%" y="319.50"></text></g><g><title>`0x7FFB74A4DC94 (1 samples, 0.10%)</title><rect x="0.8264%" y="293" width="0.1033%" height="15" fill="rgb(235,93,37)" fg:x="8" fg:w="1"/><text x="1.0764%" y="303.50"></text></g><g><title>`0x7FFB74A1118C (1 samples, 0.10%)</title><rect x="0.9298%" y="325" width="0.1033%" height="15" fill="rgb(213,116,39)" fg:x="9" fg:w="1"/><text x="1.1798%" y="335.50"></text></g><g><title>`0x7FFB74A4DB54 (1 samples, 0.10%)</title><rect x="0.9298%" y="309" width="0.1033%" height="15" fill="rgb(222,207,29)" fg:x="9" fg:w="1"/><text x="1.1798%" y="319.50"></text></g><g><title>`0x7FFB749C79C4 (1 samples, 0.10%)</title><rect x="1.0331%" y="293" width="0.1033%" height="15" fill="rgb(206,96,30)" fg:x="10" fg:w="1"/><text x="1.2831%" y="303.50"></text></g><g><title>`0x7FFB749C4EDA (1 samples, 0.10%)</title><rect x="1.0331%" y="277" width="0.1033%" height="15" fill="rgb(218,138,4)" fg:x="10" fg:w="1"/><text x="1.2831%" y="287.50"></text></g><g><title>`0x7FFB733154D4 (1 samples, 0.10%)</title><rect x="1.0331%" y="261" width="0.1033%" height="15" fill="rgb(250,191,14)" fg:x="10" fg:w="1"/><text x="1.2831%" y="271.50"></text></g><g><title>`0x7FFB74A05499 (1 samples, 0.10%)</title><rect x="1.0331%" y="245" width="0.1033%" height="15" fill="rgb(239,60,40)" fg:x="10" fg:w="1"/><text x="1.2831%" y="255.50"></text></g><g><title>`0x7FFB74A05A64 (1 samples, 0.10%)</title><rect x="1.0331%" y="229" width="0.1033%" height="15" fill="rgb(206,27,48)" fg:x="10" fg:w="1"/><text x="1.2831%" y="239.50"></text></g><g><title>`0x7FFB74A05EC3 (1 samples, 0.10%)</title><rect x="1.0331%" y="213" width="0.1033%" height="15" fill="rgb(225,35,8)" fg:x="10" fg:w="1"/><text x="1.2831%" y="223.50"></text></g><g><title>`0x7FFB74A06B14 (1 samples, 0.10%)</title><rect x="1.0331%" y="197" width="0.1033%" height="15" fill="rgb(250,213,24)" fg:x="10" fg:w="1"/><text x="1.2831%" y="207.50"></text></g><g><title>`0x7FFB74A07801 (1 samples, 0.10%)</title><rect x="1.0331%" y="181" width="0.1033%" height="15" fill="rgb(247,123,22)" fg:x="10" fg:w="1"/><text x="1.2831%" y="191.50"></text></g><g><title>`0x7FFB749C7B29 (1 samples, 0.10%)</title><rect x="1.1364%" y="293" width="0.1033%" height="15" fill="rgb(231,138,38)" fg:x="11" fg:w="1"/><text x="1.3864%" y="303.50"></text></g><g><title>`0x7FFB749C88A8 (1 samples, 0.10%)</title><rect x="1.1364%" y="277" width="0.1033%" height="15" fill="rgb(231,145,46)" fg:x="11" fg:w="1"/><text x="1.3864%" y="287.50"></text></g><g><title>`0x7FFB749C4479 (1 samples, 0.10%)</title><rect x="1.1364%" y="261" width="0.1033%" height="15" fill="rgb(251,118,11)" fg:x="11" fg:w="1"/><text x="1.3864%" y="271.50"></text></g><g><title>`0x7FFB749C4BCF (1 samples, 0.10%)</title><rect x="1.1364%" y="245" width="0.1033%" height="15" fill="rgb(217,147,25)" fg:x="11" fg:w="1"/><text x="1.3864%" y="255.50"></text></g><g><title>`0x7FFB749BFA99 (1 samples, 0.10%)</title><rect x="1.1364%" y="229" width="0.1033%" height="15" fill="rgb(247,81,37)" fg:x="11" fg:w="1"/><text x="1.3864%" y="239.50"></text></g><g><title>`0x7FFB749C06A3 (1 samples, 0.10%)</title><rect x="1.1364%" y="213" width="0.1033%" height="15" fill="rgb(209,12,38)" fg:x="11" fg:w="1"/><text x="1.3864%" y="223.50"></text></g><g><title>`0x7FFB749CFB53 (5 samples, 0.52%)</title><rect x="0.8264%" y="373" width="0.5165%" height="15" fill="rgb(227,1,9)" fg:x="8" fg:w="5"/><text x="1.0764%" y="383.50"></text></g><g><title>`0x7FFB74A1020F (5 samples, 0.52%)</title><rect x="0.8264%" y="357" width="0.5165%" height="15" fill="rgb(248,47,43)" fg:x="8" fg:w="5"/><text x="1.0764%" y="367.50"></text></g><g><title>`0x7FFB74A10F70 (4 samples, 0.41%)</title><rect x="0.9298%" y="341" width="0.4132%" height="15" fill="rgb(221,10,30)" fg:x="9" fg:w="4"/><text x="1.1798%" y="351.50"></text></g><g><title>`0x7FFB74A11243 (3 samples, 0.31%)</title><rect x="1.0331%" y="325" width="0.3099%" height="15" fill="rgb(210,229,1)" fg:x="10" fg:w="3"/><text x="1.2831%" y="335.50"></text></g><g><title>`0x7FFB749C4C14 (3 samples, 0.31%)</title><rect x="1.0331%" y="309" width="0.3099%" height="15" fill="rgb(222,148,37)" fg:x="10" fg:w="3"/><text x="1.2831%" y="319.50"></text></g><g><title>`0x7FFB749C7BC4 (1 samples, 0.10%)</title><rect x="1.2397%" y="293" width="0.1033%" height="15" fill="rgb(234,67,33)" fg:x="12" fg:w="1"/><text x="1.4897%" y="303.50"></text></g><g><title>`0x7FFB749E26C6 (1 samples, 0.10%)</title><rect x="1.2397%" y="277" width="0.1033%" height="15" fill="rgb(247,98,35)" fg:x="12" fg:w="1"/><text x="1.4897%" y="287.50"></text></g><g><title>`0x7FFB724205A2 (6 samples, 0.62%)</title><rect x="0.8264%" y="469" width="0.6198%" height="15" fill="rgb(247,138,52)" fg:x="8" fg:w="6"/><text x="1.0764%" y="479.50"></text></g><g><title>`0x7FFB724219C7 (6 samples, 0.62%)</title><rect x="0.8264%" y="453" width="0.6198%" height="15" fill="rgb(213,79,30)" fg:x="8" fg:w="6"/><text x="1.0764%" y="463.50"></text></g><g><title>`0x7FFB7241C050 (6 samples, 0.62%)</title><rect x="0.8264%" y="437" width="0.6198%" height="15" fill="rgb(246,177,23)" fg:x="8" fg:w="6"/><text x="1.0764%" y="447.50"></text></g><g><title>`0x7FFB725E2612 (6 samples, 0.62%)</title><rect x="0.8264%" y="421" width="0.6198%" height="15" fill="rgb(230,62,27)" fg:x="8" fg:w="6"/><text x="1.0764%" y="431.50"></text></g><g><title>`0x7FFB749C6AF4 (6 samples, 0.62%)</title><rect x="0.8264%" y="405" width="0.6198%" height="15" fill="rgb(216,154,8)" fg:x="8" fg:w="6"/><text x="1.0764%" y="415.50"></text></g><g><title>`0x7FFB749C73E4 (6 samples, 0.62%)</title><rect x="0.8264%" y="389" width="0.6198%" height="15" fill="rgb(244,35,45)" fg:x="8" fg:w="6"/><text x="1.0764%" y="399.50"></text></g><g><title>`0x7FFB749CFBAE (1 samples, 0.10%)</title><rect x="1.3430%" y="373" width="0.1033%" height="15" fill="rgb(251,115,12)" fg:x="13" fg:w="1"/><text x="1.5930%" y="383.50"></text></g><g><title>`0x7FFB749ED947 (1 samples, 0.10%)</title><rect x="1.3430%" y="357" width="0.1033%" height="15" fill="rgb(240,54,50)" fg:x="13" fg:w="1"/><text x="1.5930%" y="367.50"></text></g><g><title>`0x7FFB74A1D110 (1 samples, 0.10%)</title><rect x="1.3430%" y="341" width="0.1033%" height="15" fill="rgb(233,84,52)" fg:x="13" fg:w="1"/><text x="1.5930%" y="351.50"></text></g><g><title>`0x7FFB74A1D08A (1 samples, 0.10%)</title><rect x="1.3430%" y="325" width="0.1033%" height="15" fill="rgb(207,117,47)" fg:x="13" fg:w="1"/><text x="1.5930%" y="335.50"></text></g><g><title>`0x7FFB74A1D2F7 (1 samples, 0.10%)</title><rect x="1.3430%" y="309" width="0.1033%" height="15" fill="rgb(249,43,39)" fg:x="13" fg:w="1"/><text x="1.5930%" y="319.50"></text></g><g><title>`0x7FFB749C9A1D (1 samples, 0.10%)</title><rect x="1.3430%" y="293" width="0.1033%" height="15" fill="rgb(209,38,44)" fg:x="13" fg:w="1"/><text x="1.5930%" y="303.50"></text></g><g><title>`0x7FFB73A978EF (1 samples, 0.10%)</title><rect x="1.3430%" y="277" width="0.1033%" height="15" fill="rgb(236,212,23)" fg:x="13" fg:w="1"/><text x="1.5930%" y="287.50"></text></g><g><title>`0x7FFB73AB0AAE (1 samples, 0.10%)</title><rect x="1.3430%" y="261" width="0.1033%" height="15" fill="rgb(242,79,21)" fg:x="13" fg:w="1"/><text x="1.5930%" y="271.50"></text></g><g><title>`0x7FFB73AB0C20 (1 samples, 0.10%)</title><rect x="1.3430%" y="245" width="0.1033%" height="15" fill="rgb(211,96,35)" fg:x="13" fg:w="1"/><text x="1.5930%" y="255.50"></text></g><g><title>`0x7FFB73AA9F44 (1 samples, 0.10%)</title><rect x="1.3430%" y="229" width="0.1033%" height="15" fill="rgb(253,215,40)" fg:x="13" fg:w="1"/><text x="1.5930%" y="239.50"></text></g><g><title>`0x7FFB73AA9D40 (1 samples, 0.10%)</title><rect x="1.3430%" y="213" width="0.1033%" height="15" fill="rgb(211,81,21)" fg:x="13" fg:w="1"/><text x="1.5930%" y="223.50"></text></g><g><title>`0x7FFB749DB44D (1 samples, 0.10%)</title><rect x="1.3430%" y="197" width="0.1033%" height="15" fill="rgb(208,190,38)" fg:x="13" fg:w="1"/><text x="1.5930%" y="207.50"></text></g><g><title>`0x7FFB749DD37A (1 samples, 0.10%)</title><rect x="1.3430%" y="181" width="0.1033%" height="15" fill="rgb(235,213,38)" fg:x="13" fg:w="1"/><text x="1.5930%" y="191.50"></text></g><g><title>`0x7FFB749F4D2F (1 samples, 0.10%)</title><rect x="1.3430%" y="165" width="0.1033%" height="15" fill="rgb(237,122,38)" fg:x="13" fg:w="1"/><text x="1.5930%" y="175.50"></text></g><g><title>`0x7FFB749F4B80 (1 samples, 0.10%)</title><rect x="1.3430%" y="149" width="0.1033%" height="15" fill="rgb(244,218,35)" fg:x="13" fg:w="1"/><text x="1.5930%" y="159.50"></text></g><g><title>`0x7FFB749F4810 (1 samples, 0.10%)</title><rect x="1.3430%" y="133" width="0.1033%" height="15" fill="rgb(240,68,47)" fg:x="13" fg:w="1"/><text x="1.5930%" y="143.50"></text></g><g><title>`0x7FFB749F4739 (1 samples, 0.10%)</title><rect x="1.3430%" y="117" width="0.1033%" height="15" fill="rgb(210,16,53)" fg:x="13" fg:w="1"/><text x="1.5930%" y="127.50"></text></g><g><title>`0x7FFB749F38C0 (1 samples, 0.10%)</title><rect x="1.3430%" y="101" width="0.1033%" height="15" fill="rgb(235,124,12)" fg:x="13" fg:w="1"/><text x="1.5930%" y="111.50"></text></g><g><title>`0x7FFB74A2D612 (1 samples, 0.10%)</title><rect x="1.3430%" y="85" width="0.1033%" height="15" fill="rgb(224,169,11)" fg:x="13" fg:w="1"/><text x="1.5930%" y="95.50"></text></g><g><title>`0x7FFB74A4D734 (1 samples, 0.10%)</title><rect x="1.3430%" y="69" width="0.1033%" height="15" fill="rgb(250,166,2)" fg:x="13" fg:w="1"/><text x="1.5930%" y="79.50"></text></g><g><title>`0x7FFB7242045F (7 samples, 0.72%)</title><rect x="0.8264%" y="485" width="0.7231%" height="15" fill="rgb(242,216,29)" fg:x="8" fg:w="7"/><text x="1.0764%" y="495.50"></text></g><g><title>`0x7FFB724205BC (1 samples, 0.10%)</title><rect x="1.4463%" y="469" width="0.1033%" height="15" fill="rgb(230,116,27)" fg:x="14" fg:w="1"/><text x="1.6963%" y="479.50"></text></g><g><title>`0x7FFB7331E3EB (1 samples, 0.10%)</title><rect x="1.4463%" y="453" width="0.1033%" height="15" fill="rgb(228,99,48)" fg:x="14" fg:w="1"/><text x="1.6963%" y="463.50"></text></g><g><title>`0x7FFB74A0EF7D (1 samples, 0.10%)</title><rect x="1.4463%" y="437" width="0.1033%" height="15" fill="rgb(253,11,6)" fg:x="14" fg:w="1"/><text x="1.6963%" y="447.50"></text></g><g><title>`0x7FFB74A0F1CA (1 samples, 0.10%)</title><rect x="1.4463%" y="421" width="0.1033%" height="15" fill="rgb(247,143,39)" fg:x="14" fg:w="1"/><text x="1.6963%" y="431.50"></text></g><g><title>`0x7FFB749C9A1D (1 samples, 0.10%)</title><rect x="1.4463%" y="405" width="0.1033%" height="15" fill="rgb(236,97,10)" fg:x="14" fg:w="1"/><text x="1.6963%" y="415.50"></text></g><g><title>`0x7FFB6FED3F14 (1 samples, 0.10%)</title><rect x="1.4463%" y="389" width="0.1033%" height="15" fill="rgb(233,208,19)" fg:x="14" fg:w="1"/><text x="1.6963%" y="399.50"></text></g><g><title>`0x7FFB749D47B1 (1 samples, 0.10%)</title><rect x="1.6529%" y="309" width="0.1033%" height="15" fill="rgb(216,164,2)" fg:x="16" fg:w="1"/><text x="1.9029%" y="319.50"></text></g><g><title>`0x7FFB749D5B74 (1 samples, 0.10%)</title><rect x="1.6529%" y="293" width="0.1033%" height="15" fill="rgb(220,129,5)" fg:x="16" fg:w="1"/><text x="1.9029%" y="303.50"></text></g><g><title>`0x7FFB749D6F37 (1 samples, 0.10%)</title><rect x="1.6529%" y="277" width="0.1033%" height="15" fill="rgb(242,17,10)" fg:x="16" fg:w="1"/><text x="1.9029%" y="287.50"></text></g><g><title>`0x7FFB749B9B1A (1 samples, 0.10%)</title><rect x="1.6529%" y="261" width="0.1033%" height="15" fill="rgb(242,107,0)" fg:x="16" fg:w="1"/><text x="1.9029%" y="271.50"></text></g><g><title>`0x7FFB74A4D8B4 (1 samples, 0.10%)</title><rect x="1.6529%" y="245" width="0.1033%" height="15" fill="rgb(251,28,31)" fg:x="16" fg:w="1"/><text x="1.9029%" y="255.50"></text></g><g><title>osumapchecker.exe`core::ptr::drop_in_place (1 samples, 0.10%)</title><rect x="1.7562%" y="309" width="0.1033%" height="15" fill="rgb(233,223,10)" fg:x="17" fg:w="1"/><text x="2.0062%" y="319.50"></text></g><g><title>osumapchecker.exe`core::ptr::drop_in_place(alloc::vec::Vec (1 samples, 0.10%)</title><rect x="1.7562%" y="293" width="0.1033%" height="15" fill="rgb(215,21,27)" fg:x="17" fg:w="1"/><text x="2.0062%" y="303.50"></text></g><g><title>osumapchecker.exe`core::ptr::drop_in_place(alloc::raw_vec::RawVec (1 samples, 0.10%)</title><rect x="1.7562%" y="277" width="0.1033%" height="15" fill="rgb(232,23,21)" fg:x="17" fg:w="1"/><text x="2.0062%" y="287.50"></text></g><g><title>osumapchecker.exe`alloc::raw_vec::impl$4::drop(alloc::raw_vec::RawVec (1 samples, 0.10%)</title><rect x="1.7562%" y="261" width="0.1033%" height="15" fill="rgb(244,5,23)" fg:x="17" fg:w="1"/><text x="2.0062%" y="271.50"></text></g><g><title>osumapchecker.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::deallocate (1 samples, 0.10%)</title><rect x="1.7562%" y="245" width="0.1033%" height="15" fill="rgb(226,81,46)" fg:x="17" fg:w="1"/><text x="2.0062%" y="255.50"></text></g><g><title>osumapchecker.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::current_memory (1 samples, 0.10%)</title><rect x="1.7562%" y="229" width="0.1033%" height="15" fill="rgb(247,70,30)" fg:x="17" fg:w="1"/><text x="2.0062%" y="239.50"></text></g><g><title>`0x7FFB749D47B1 (1 samples, 0.10%)</title><rect x="1.7562%" y="213" width="0.1033%" height="15" fill="rgb(212,68,19)" fg:x="17" fg:w="1"/><text x="2.0062%" y="223.50"></text></g><g><title>`0x7FFB749D5B74 (1 samples, 0.10%)</title><rect x="1.7562%" y="197" width="0.1033%" height="15" fill="rgb(240,187,13)" fg:x="17" fg:w="1"/><text x="2.0062%" y="207.50"></text></g><g><title>`0x7FFB749D6F37 (1 samples, 0.10%)</title><rect x="1.7562%" y="181" width="0.1033%" height="15" fill="rgb(223,113,26)" fg:x="17" fg:w="1"/><text x="2.0062%" y="191.50"></text></g><g><title>`0x7FFB749B9B1A (1 samples, 0.10%)</title><rect x="1.7562%" y="165" width="0.1033%" height="15" fill="rgb(206,192,2)" fg:x="17" fg:w="1"/><text x="2.0062%" y="175.50"></text></g><g><title>`0x7FFB74A4D8B4 (1 samples, 0.10%)</title><rect x="1.7562%" y="149" width="0.1033%" height="15" fill="rgb(241,108,4)" fg:x="17" fg:w="1"/><text x="2.0062%" y="159.50"></text></g><g><title>osumapchecker.exe`osumapchecker::parser::BeatmapParser::new(ref$ (1 samples, 0.10%)</title><rect x="1.8595%" y="309" width="0.1033%" height="15" fill="rgb(247,173,49)" fg:x="18" fg:w="1"/><text x="2.1095%" y="319.50"></text></g><g><title>osumapchecker.exe`alloc::vec::Vec&lt;osumapchecker::parser::DebugItem,alloc::alloc::Global&gt;::with_capacity (1 samples, 0.10%)</title><rect x="1.8595%" y="293" width="0.1033%" height="15" fill="rgb(224,114,35)" fg:x="18" fg:w="1"/><text x="2.1095%" y="303.50"></text></g><g><title>osumapchecker.exe`alloc::vec::Vec&lt;osumapchecker::parser::DebugItem,alloc::alloc::Global&gt;::with_capacity_in (1 samples, 0.10%)</title><rect x="1.8595%" y="277" width="0.1033%" height="15" fill="rgb(245,159,27)" fg:x="18" fg:w="1"/><text x="2.1095%" y="287.50"></text></g><g><title>osumapchecker.exe`alloc::raw_vec::RawVec&lt;osumapchecker::parser::DebugItem,alloc::alloc::Global&gt;::with_capacity_in (1 samples, 0.10%)</title><rect x="1.8595%" y="261" width="0.1033%" height="15" fill="rgb(245,172,44)" fg:x="18" fg:w="1"/><text x="2.1095%" y="271.50"></text></g><g><title>osumapchecker.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::with_capacity_in (1 samples, 0.10%)</title><rect x="1.8595%" y="245" width="0.1033%" height="15" fill="rgb(236,23,11)" fg:x="18" fg:w="1"/><text x="2.1095%" y="255.50"></text></g><g><title>osumapchecker.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::try_allocate_in (1 samples, 0.10%)</title><rect x="1.8595%" y="229" width="0.1033%" height="15" fill="rgb(205,117,38)" fg:x="18" fg:w="1"/><text x="2.1095%" y="239.50"></text></g><g><title>osumapchecker.exe`alloc::alloc::impl$1::allocate (1 samples, 0.10%)</title><rect x="1.8595%" y="213" width="0.1033%" height="15" fill="rgb(237,72,25)" fg:x="18" fg:w="1"/><text x="2.1095%" y="223.50"></text></g><g><title>osumapchecker.exe`alloc::alloc::Global::alloc_impl (1 samples, 0.10%)</title><rect x="1.8595%" y="197" width="0.1033%" height="15" fill="rgb(244,70,9)" fg:x="18" fg:w="1"/><text x="2.1095%" y="207.50"></text></g><g><title>osumapchecker.exe`alloc::alloc::alloc (1 samples, 0.10%)</title><rect x="1.8595%" y="181" width="0.1033%" height="15" fill="rgb(217,125,39)" fg:x="18" fg:w="1"/><text x="2.1095%" y="191.50"></text></g><g><title>osumapchecker.exe`std::alloc::__default_lib_allocator::__rdl_alloc (1 samples, 0.10%)</title><rect x="1.8595%" y="165" width="0.1033%" height="15" fill="rgb(235,36,10)" fg:x="18" fg:w="1"/><text x="2.1095%" y="175.50"></text></g><g><title>osumapchecker.exe`std::sys::alloc::windows::impl$0::alloc (1 samples, 0.10%)</title><rect x="1.8595%" y="149" width="0.1033%" height="15" fill="rgb(251,123,47)" fg:x="18" fg:w="1"/><text x="2.1095%" y="159.50"></text></g><g><title>osumapchecker.exe`std::sys::alloc::windows::allocate (1 samples, 0.10%)</title><rect x="1.8595%" y="133" width="0.1033%" height="15" fill="rgb(221,13,13)" fg:x="18" fg:w="1"/><text x="2.1095%" y="143.50"></text></g><g><title>`0x7FFB749DB44D (1 samples, 0.10%)</title><rect x="1.8595%" y="117" width="0.1033%" height="15" fill="rgb(238,131,9)" fg:x="18" fg:w="1"/><text x="2.1095%" y="127.50"></text></g><g><title>`0x7FFB749DEEEE (1 samples, 0.10%)</title><rect x="1.8595%" y="101" width="0.1033%" height="15" fill="rgb(211,50,8)" fg:x="18" fg:w="1"/><text x="2.1095%" y="111.50"></text></g><g><title>`0x7FFB74A4CD8E (1 samples, 0.10%)</title><rect x="1.8595%" y="85" width="0.1033%" height="15" fill="rgb(245,182,24)" fg:x="18" fg:w="1"/><text x="2.1095%" y="95.50"></text></g><g><title>`0x7FFB74A4D7F4 (1 samples, 0.10%)</title><rect x="1.8595%" y="69" width="0.1033%" height="15" fill="rgb(242,14,37)" fg:x="18" fg:w="1"/><text x="2.1095%" y="79.50"></text></g><g><title>osumapchecker.exe`std::fs::File::open (1 samples, 0.10%)</title><rect x="1.9628%" y="181" width="0.1033%" height="15" fill="rgb(246,228,12)" fg:x="19" fg:w="1"/><text x="2.2128%" y="191.50"></text></g><g><title>osumapchecker.exe`std::fs::OpenOptions::open (1 samples, 0.10%)</title><rect x="1.9628%" y="165" width="0.1033%" height="15" fill="rgb(213,55,15)" fg:x="19" fg:w="1"/><text x="2.2128%" y="175.50"></text></g><g><title>osumapchecker.exe`std::fs::OpenOptions::_open (1 samples, 0.10%)</title><rect x="1.9628%" y="149" width="0.1033%" height="15" fill="rgb(209,9,3)" fg:x="19" fg:w="1"/><text x="2.2128%" y="159.50"></text></g><g><title>osumapchecker.exe`std::sys::pal::windows::fs::File::open (1 samples, 0.10%)</title><rect x="1.9628%" y="133" width="0.1033%" height="15" fill="rgb(230,59,30)" fg:x="19" fg:w="1"/><text x="2.2128%" y="143.50"></text></g><g><title>`0x7FFB725E1476 (1 samples, 0.10%)</title><rect x="1.9628%" y="117" width="0.1033%" height="15" fill="rgb(209,121,21)" fg:x="19" fg:w="1"/><text x="2.2128%" y="127.50"></text></g><g><title>`0x7FFB725E1A09 (1 samples, 0.10%)</title><rect x="1.9628%" y="101" width="0.1033%" height="15" fill="rgb(220,109,13)" fg:x="19" fg:w="1"/><text x="2.2128%" y="111.50"></text></g><g><title>`0x7FFB74A4DF94 (1 samples, 0.10%)</title><rect x="1.9628%" y="85" width="0.1033%" height="15" fill="rgb(232,18,1)" fg:x="19" fg:w="1"/><text x="2.2128%" y="95.50"></text></g><g><title>osumapchecker.exe`core::result::Result::is_err (30 samples, 3.10%)</title><rect x="2.0661%" y="149" width="3.0992%" height="15" fill="rgb(215,41,42)" fg:x="20" fg:w="30"/><text x="2.3161%" y="159.50">osu..</text></g><g><title>osumapchecker.exe`core::result::Result::is_ok (30 samples, 3.10%)</title><rect x="2.0661%" y="133" width="3.0992%" height="15" fill="rgb(224,123,36)" fg:x="20" fg:w="30"/><text x="2.3161%" y="143.50">osu..</text></g><g><title>osumapchecker.exe`core::str::converts::from_utf8 (30 samples, 3.10%)</title><rect x="2.0661%" y="117" width="3.0992%" height="15" fill="rgb(240,125,3)" fg:x="20" fg:w="30"/><text x="2.3161%" y="127.50">osu..</text></g><g><title>osumapchecker.exe`core::str::validations::run_utf8_validation (30 samples, 3.10%)</title><rect x="2.0661%" y="101" width="3.0992%" height="15" fill="rgb(205,98,50)" fg:x="20" fg:w="30"/><text x="2.3161%" y="111.50">osu..</text></g><g><title>osumapchecker.exe`std::fs::read_to_string (55 samples, 5.68%)</title><rect x="1.9628%" y="309" width="5.6818%" height="15" fill="rgb(205,185,37)" fg:x="19" fg:w="55"/><text x="2.2128%" y="319.50">osumapc..</text></g><g><title>osumapchecker.exe`core::ptr::drop_in_place (55 samples, 5.68%)</title><rect x="1.9628%" y="293" width="5.6818%" height="15" fill="rgb(238,207,15)" fg:x="19" fg:w="55"/><text x="2.2128%" y="303.50">osumapc..</text></g><g><title>osumapchecker.exe`core::ptr::drop_in_place(alloc::vec::Vec (55 samples, 5.68%)</title><rect x="1.9628%" y="277" width="5.6818%" height="15" fill="rgb(213,199,42)" fg:x="19" fg:w="55"/><text x="2.2128%" y="287.50">osumapc..</text></g><g><title>osumapchecker.exe`core::ptr::drop_in_place(alloc::raw_vec::RawVec (55 samples, 5.68%)</title><rect x="1.9628%" y="261" width="5.6818%" height="15" fill="rgb(235,201,11)" fg:x="19" fg:w="55"/><text x="2.2128%" y="271.50">osumapc..</text></g><g><title>osumapchecker.exe`alloc::raw_vec::impl$4::drop(alloc::raw_vec::RawVec (55 samples, 5.68%)</title><rect x="1.9628%" y="245" width="5.6818%" height="15" fill="rgb(207,46,11)" fg:x="19" fg:w="55"/><text x="2.2128%" y="255.50">osumapc..</text></g><g><title>osumapchecker.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::deallocate (55 samples, 5.68%)</title><rect x="1.9628%" y="229" width="5.6818%" height="15" fill="rgb(241,35,35)" fg:x="19" fg:w="55"/><text x="2.2128%" y="239.50">osumapc..</text></g><g><title>osumapchecker.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::current_memory (55 samples, 5.68%)</title><rect x="1.9628%" y="213" width="5.6818%" height="15" fill="rgb(243,32,47)" fg:x="19" fg:w="55"/><text x="2.2128%" y="223.50">osumapc..</text></g><g><title>osumapchecker.exe`std::fs::read_to_string::inner (55 samples, 5.68%)</title><rect x="1.9628%" y="197" width="5.6818%" height="15" fill="rgb(247,202,23)" fg:x="19" fg:w="55"/><text x="2.2128%" y="207.50">osumapc..</text></g><g><title>osumapchecker.exe`std::io::default_read_to_string (54 samples, 5.58%)</title><rect x="2.0661%" y="181" width="5.5785%" height="15" fill="rgb(219,102,11)" fg:x="20" fg:w="54"/><text x="2.3161%" y="191.50">osumapc..</text></g><g><title>osumapchecker.exe`std::io::append_to_string (54 samples, 5.58%)</title><rect x="2.0661%" y="165" width="5.5785%" height="15" fill="rgb(243,110,44)" fg:x="20" fg:w="54"/><text x="2.3161%" y="175.50">osumapc..</text></g><g><title>osumapchecker.exe`std::io::default_read_to_string::closure$0 (24 samples, 2.48%)</title><rect x="5.1653%" y="149" width="2.4793%" height="15" fill="rgb(222,74,54)" fg:x="50" fg:w="24"/><text x="5.4153%" y="159.50">os..</text></g><g><title>osumapchecker.exe`std::io::default_read_to_end (24 samples, 2.48%)</title><rect x="5.1653%" y="133" width="2.4793%" height="15" fill="rgb(216,99,12)" fg:x="50" fg:w="24"/><text x="5.4153%" y="143.50">os..</text></g><g><title>osumapchecker.exe`std::fs::impl$8::read_buf (24 samples, 2.48%)</title><rect x="5.1653%" y="117" width="2.4793%" height="15" fill="rgb(226,22,26)" fg:x="50" fg:w="24"/><text x="5.4153%" y="127.50">os..</text></g><g><title>osumapchecker.exe`std::fs::impl$5::read_buf (24 samples, 2.48%)</title><rect x="5.1653%" y="101" width="2.4793%" height="15" fill="rgb(217,163,10)" fg:x="50" fg:w="24"/><text x="5.4153%" y="111.50">os..</text></g><g><title>osumapchecker.exe`std::sys::pal::windows::fs::File::read_buf (24 samples, 2.48%)</title><rect x="5.1653%" y="85" width="2.4793%" height="15" fill="rgb(213,25,53)" fg:x="50" fg:w="24"/><text x="5.4153%" y="95.50">os..</text></g><g><title>osumapchecker.exe`std::sys::pal::windows::handle::Handle::read_buf (24 samples, 2.48%)</title><rect x="5.1653%" y="69" width="2.4793%" height="15" fill="rgb(252,105,26)" fg:x="50" fg:w="24"/><text x="5.4153%" y="79.50">os..</text></g><g><title>osumapchecker.exe`std::sys::pal::windows::handle::Handle::synchronous_read (24 samples, 2.48%)</title><rect x="5.1653%" y="53" width="2.4793%" height="15" fill="rgb(220,39,43)" fg:x="50" fg:w="24"/><text x="5.4153%" y="63.50">os..</text></g><g><title>`0x7FFB74A4D5B4 (24 samples, 2.48%)</title><rect x="5.1653%" y="37" width="2.4793%" height="15" fill="rgb(229,68,48)" fg:x="50" fg:w="24"/><text x="5.4153%" y="47.50">`0..</text></g><g><title>osumapchecker.exe`std::io::stdio::_print (1 samples, 0.10%)</title><rect x="7.6446%" y="309" width="0.1033%" height="15" fill="rgb(252,8,32)" fg:x="74" fg:w="1"/><text x="7.8946%" y="319.50"></text></g><g><title>osumapchecker.exe`std::io::stdio::print_to (1 samples, 0.10%)</title><rect x="7.6446%" y="293" width="0.1033%" height="15" fill="rgb(223,20,43)" fg:x="74" fg:w="1"/><text x="7.8946%" y="303.50"></text></g><g><title>osumapchecker.exe`std::io::stdio::impl$15::write_fmt (1 samples, 0.10%)</title><rect x="7.6446%" y="277" width="0.1033%" height="15" fill="rgb(229,81,49)" fg:x="74" fg:w="1"/><text x="7.8946%" y="287.50"></text></g><g><title>osumapchecker.exe`std::io::stdio::impl$16::write_fmt (1 samples, 0.10%)</title><rect x="7.6446%" y="261" width="0.1033%" height="15" fill="rgb(236,28,36)" fg:x="74" fg:w="1"/><text x="7.8946%" y="271.50"></text></g><g><title>osumapchecker.exe`std::io::stdio::Stdout::lock (1 samples, 0.10%)</title><rect x="7.6446%" y="245" width="0.1033%" height="15" fill="rgb(249,185,26)" fg:x="74" fg:w="1"/><text x="7.8946%" y="255.50"></text></g><g><title>osumapchecker.exe`std::sync::reentrant_lock::ReentrantLock::lock (1 samples, 0.10%)</title><rect x="7.6446%" y="229" width="0.1033%" height="15" fill="rgb(249,174,33)" fg:x="74" fg:w="1"/><text x="7.8946%" y="239.50"></text></g><g><title>osumapchecker.exe`std::thread::current::current_id (1 samples, 0.10%)</title><rect x="7.6446%" y="213" width="0.1033%" height="15" fill="rgb(233,201,37)" fg:x="74" fg:w="1"/><text x="7.8946%" y="223.50"></text></g><g><title>osumapchecker.exe`std::thread::current::id::get_or_init (1 samples, 0.10%)</title><rect x="7.6446%" y="197" width="0.1033%" height="15" fill="rgb(221,78,26)" fg:x="74" fg:w="1"/><text x="7.8946%" y="207.50"></text></g><g><title>osumapchecker.exe`std::thread::current::id::get (1 samples, 0.10%)</title><rect x="7.6446%" y="181" width="0.1033%" height="15" fill="rgb(250,127,30)" fg:x="74" fg:w="1"/><text x="7.8946%" y="191.50"></text></g><g><title>osumapchecker.exe`core::cell::Cell::get (1 samples, 0.10%)</title><rect x="7.6446%" y="165" width="0.1033%" height="15" fill="rgb(230,49,44)" fg:x="74" fg:w="1"/><text x="7.8946%" y="175.50"></text></g><g><title>osumapchecker.exe`std::sync::once_lock::OnceLock::initialize&lt;std::sync::reentrant_lock::ReentrantLock&lt;core::cell::RefCell&lt;std::io::buffered::linewriter::LineWriter&lt;std::io::stdio::StdoutRaw&gt; &gt; &gt;,std::sync::once_lock::impl$0::get_or_init::closure_env$0&lt;std::sync::reentrant_lock::ReentrantLock&lt;core::cell::RefCell&lt;std::io::buffered::linewriter::LineWriter&lt;std::io::stdio::StdoutRaw&gt; &gt; &gt;,std::io::stdio::stdout::closure_env$0&gt;,never$&gt; (1 samples, 0.10%)</title><rect x="7.6446%" y="149" width="0.1033%" height="15" fill="rgb(229,67,23)" fg:x="74" fg:w="1"/><text x="7.8946%" y="159.50"></text></g><g><title>osumapchecker.exe`osumapchecker::parser::BeatmapParser::loop_general (1 samples, 0.10%)</title><rect x="7.7479%" y="245" width="0.1033%" height="15" fill="rgb(249,83,47)" fg:x="75" fg:w="1"/><text x="7.9979%" y="255.50"></text></g><g><title>osumapchecker.exe`osumapchecker::parser::BeatmapParser::parse_item_general (1 samples, 0.10%)</title><rect x="7.7479%" y="229" width="0.1033%" height="15" fill="rgb(215,43,3)" fg:x="75" fg:w="1"/><text x="7.9979%" y="239.50"></text></g><g><title>osumapchecker.exe`osumapchecker::parser::BeatmapParser::parse_section_header (1 samples, 0.10%)</title><rect x="7.7479%" y="213" width="0.1033%" height="15" fill="rgb(238,154,13)" fg:x="75" fg:w="1"/><text x="7.9979%" y="223.50"></text></g><g><title>osumapchecker.exe`core::ptr::drop_in_place(alloc::vec::Vec (1 samples, 0.10%)</title><rect x="7.7479%" y="197" width="0.1033%" height="15" fill="rgb(219,56,2)" fg:x="75" fg:w="1"/><text x="7.9979%" y="207.50"></text></g><g><title>osumapchecker.exe`core::ptr::drop_in_place(alloc::raw_vec::RawVec (1 samples, 0.10%)</title><rect x="7.7479%" y="181" width="0.1033%" height="15" fill="rgb(233,0,4)" fg:x="75" fg:w="1"/><text x="7.9979%" y="191.50"></text></g><g><title>osumapchecker.exe`alloc::raw_vec::impl$4::drop(alloc::raw_vec::RawVec (1 samples, 0.10%)</title><rect x="7.7479%" y="165" width="0.1033%" height="15" fill="rgb(235,30,7)" fg:x="75" fg:w="1"/><text x="7.9979%" y="175.50"></text></g><g><title>osumapchecker.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::deallocate (1 samples, 0.10%)</title><rect x="7.7479%" y="149" width="0.1033%" height="15" fill="rgb(250,79,13)" fg:x="75" fg:w="1"/><text x="7.9979%" y="159.50"></text></g><g><title>osumapchecker.exe`alloc::alloc::impl$1::deallocate(alloc::alloc::Global*, core::ptr::non_null::NonNull (1 samples, 0.10%)</title><rect x="7.7479%" y="133" width="0.1033%" height="15" fill="rgb(211,146,34)" fg:x="75" fg:w="1"/><text x="7.9979%" y="143.50"></text></g><g><title>osumapchecker.exe`alloc::alloc::dealloc (1 samples, 0.10%)</title><rect x="7.7479%" y="117" width="0.1033%" height="15" fill="rgb(228,22,38)" fg:x="75" fg:w="1"/><text x="7.9979%" y="127.50"></text></g><g><title>osumapchecker.exe`std::alloc::__default_lib_allocator::__rdl_dealloc (1 samples, 0.10%)</title><rect x="7.7479%" y="101" width="0.1033%" height="15" fill="rgb(235,168,5)" fg:x="75" fg:w="1"/><text x="7.9979%" y="111.50"></text></g><g><title>osumapchecker.exe`std::sys::alloc::windows::impl$0::dealloc (1 samples, 0.10%)</title><rect x="7.7479%" y="85" width="0.1033%" height="15" fill="rgb(221,155,16)" fg:x="75" fg:w="1"/><text x="7.9979%" y="95.50"></text></g><g><title>osumapchecker.exe`std::sys::alloc::windows::get_process_heap (1 samples, 0.10%)</title><rect x="7.7479%" y="69" width="0.1033%" height="15" fill="rgb(215,215,53)" fg:x="75" fg:w="1"/><text x="7.9979%" y="79.50"></text></g><g><title>`0x7FFB749D47B1 (1 samples, 0.10%)</title><rect x="7.7479%" y="53" width="0.1033%" height="15" fill="rgb(223,4,10)" fg:x="75" fg:w="1"/><text x="7.9979%" y="63.50"></text></g><g><title>osumapchecker.exe`osumapchecker::parser::BeatmapParser::is_at_end (2 samples, 0.21%)</title><rect x="7.8512%" y="229" width="0.2066%" height="15" fill="rgb(234,103,6)" fg:x="76" fg:w="2"/><text x="8.1012%" y="239.50"></text></g><g><title>osumapchecker.exe`osumapchecker::parser::BeatmapParser::advance (6 samples, 0.62%)</title><rect x="8.1612%" y="213" width="0.6198%" height="15" fill="rgb(227,97,0)" fg:x="79" fg:w="6"/><text x="8.4112%" y="223.50"></text></g><g><title>osumapchecker.exe`core::slice::index::impl$0::index(ref$&lt;slice2$&lt;u8&gt; &gt;, core::ops::range::Range (11 samples, 1.14%)</title><rect x="21.9008%" y="149" width="1.1364%" height="15" fill="rgb(234,150,53)" fg:x="212" fg:w="11"/><text x="22.1508%" y="159.50"></text></g><g><title>osumapchecker.exe`core::slice::index::impl$4::index(core::ops::range::Range&lt;usize&gt;, ref$&lt;slice2$ (11 samples, 1.14%)</title><rect x="21.9008%" y="133" width="1.1364%" height="15" fill="rgb(228,201,54)" fg:x="212" fg:w="11"/><text x="22.1508%" y="143.50"></text></g><g><title>osumapchecker.exe`core::num::impl$11::checked_sub (10 samples, 1.03%)</title><rect x="22.0041%" y="117" width="1.0331%" height="15" fill="rgb(222,22,37)" fg:x="213" fg:w="10"/><text x="22.2541%" y="127.50"></text></g><g><title>osumapchecker.exe`core::str::impl$0::parse(ref$ (49 samples, 5.06%)</title><rect x="23.0372%" y="149" width="5.0620%" height="15" fill="rgb(237,53,32)" fg:x="223" fg:w="49"/><text x="23.2872%" y="159.50">osumap..</text></g><g><title>osumapchecker.exe`core::num::impl$19::from_str(ref$ (49 samples, 5.06%)</title><rect x="23.0372%" y="133" width="5.0620%" height="15" fill="rgb(233,25,53)" fg:x="223" fg:w="49"/><text x="23.2872%" y="143.50">osumap..</text></g><g><title>osumapchecker.exe`core::num::impl$41::from_str_radix(ref$ (49 samples, 5.06%)</title><rect x="23.0372%" y="117" width="5.0620%" height="15" fill="rgb(210,40,34)" fg:x="223" fg:w="49"/><text x="23.2872%" y="127.50">osumap..</text></g><g><title>osumapchecker.exe`core::num::impl$39::from_str_radix(ref$ (49 samples, 5.06%)</title><rect x="23.0372%" y="101" width="5.0620%" height="15" fill="rgb(241,220,44)" fg:x="223" fg:w="49"/><text x="23.2872%" y="111.50">osumap..</text></g><g><title>osumapchecker.exe`core::char::methods::impl$0::to_digit (4 samples, 0.41%)</title><rect x="27.6860%" y="85" width="0.4132%" height="15" fill="rgb(235,28,35)" fg:x="268" fg:w="4"/><text x="27.9360%" y="95.50"></text></g><g><title>osumapchecker.exe`core::num::impl$8::wrapping_sub (3 samples, 0.31%)</title><rect x="27.7893%" y="69" width="0.3099%" height="15" fill="rgb(210,56,17)" fg:x="269" fg:w="3"/><text x="28.0393%" y="79.50"></text></g><g><title>osumapchecker.exe`osumapchecker::parser::BeatmapParser::advance (23 samples, 2.38%)</title><rect x="28.0992%" y="149" width="2.3760%" height="15" fill="rgb(224,130,29)" fg:x="272" fg:w="23"/><text x="28.3492%" y="159.50">os..</text></g><g><title>osumapchecker.exe`osumapchecker::parser::BeatmapParser::is_at_end (14 samples, 1.45%)</title><rect x="30.4752%" y="149" width="1.4463%" height="15" fill="rgb(235,212,8)" fg:x="295" fg:w="14"/><text x="30.7252%" y="159.50"></text></g><g><title>osumapchecker.exe`alloc::vec::Vec&lt;osumapchecker::parser::DebugItem,alloc::alloc::Global&gt;::as_mut_ptr (1 samples, 0.10%)</title><rect x="32.4380%" y="117" width="0.1033%" height="15" fill="rgb(223,33,50)" fg:x="314" fg:w="1"/><text x="32.6880%" y="127.50"></text></g><g><title>osumapchecker.exe`osumapchecker::parser::BeatmapParser::match (271 samples, 28.00%)</title><rect x="9.9174%" y="197" width="27.9959%" height="15" fill="rgb(219,149,13)" fg:x="96" fg:w="271"/><text x="10.1674%" y="207.50">osumapchecker.exe`osumapchecker::parser::Beat..</text></g><g><title>osumapchecker.exe`osumapchecker::parser::BeatmapParser::is_at_end (251 samples, 25.93%)</title><rect x="11.9835%" y="181" width="25.9298%" height="15" fill="rgb(250,156,29)" fg:x="116" fg:w="251"/><text x="12.2335%" y="191.50">osumapchecker.exe`osumapchecker::parser::..</text></g><g><title>osumapchecker.exe`osumapchecker::parser::BeatmapParser::parse_integer (248 samples, 25.62%)</title><rect x="12.2934%" y="165" width="25.6198%" height="15" fill="rgb(216,193,19)" fg:x="119" fg:w="248"/><text x="12.5434%" y="175.50">osumapchecker.exe`osumapchecker::parser::..</text></g><g><title>osumapchecker.exe`osumapchecker::parser::BeatmapParser::push_item(enum2$ (58 samples, 5.99%)</title><rect x="31.9215%" y="149" width="5.9917%" height="15" fill="rgb(216,135,14)" fg:x="309" fg:w="58"/><text x="32.1715%" y="159.50">osumapch..</text></g><g><title>osumapchecker.exe`alloc::vec::Vec&lt;osumapchecker::parser::DebugItem,alloc::alloc::Global&gt;::push (58 samples, 5.99%)</title><rect x="31.9215%" y="133" width="5.9917%" height="15" fill="rgb(241,47,5)" fg:x="309" fg:w="58"/><text x="32.1715%" y="143.50">osumapch..</text></g><g><title>osumapchecker.exe`core::ptr::write (52 samples, 5.37%)</title><rect x="32.5413%" y="117" width="5.3719%" height="15" fill="rgb(233,42,35)" fg:x="315" fg:w="52"/><text x="32.7913%" y="127.50">osumapc..</text></g><g><title>osumapchecker.exe`core::slice::index::impl$0::index(ref$&lt;slice2$&lt;u8&gt; &gt;, core::ops::range::Range (1 samples, 0.10%)</title><rect x="40.1860%" y="181" width="0.1033%" height="15" fill="rgb(231,13,6)" fg:x="389" fg:w="1"/><text x="40.4360%" y="191.50"></text></g><g><title>osumapchecker.exe`core::slice::index::impl$4::index(core::ops::range::Range&lt;usize&gt;, ref$&lt;slice2$ (1 samples, 0.10%)</title><rect x="40.1860%" y="165" width="0.1033%" height="15" fill="rgb(207,181,40)" fg:x="389" fg:w="1"/><text x="40.4360%" y="175.50"></text></g><g><title>osumapchecker.exe`core::str::impl$0::parse(ref$ (3 samples, 0.31%)</title><rect x="40.2893%" y="181" width="0.3099%" height="15" fill="rgb(254,173,49)" fg:x="390" fg:w="3"/><text x="40.5393%" y="191.50"></text></g><g><title>osumapchecker.exe`core::num::impl$19::from_str(ref$ (3 samples, 0.31%)</title><rect x="40.2893%" y="165" width="0.3099%" height="15" fill="rgb(221,1,38)" fg:x="390" fg:w="3"/><text x="40.5393%" y="175.50"></text></g><g><title>osumapchecker.exe`core::num::impl$41::from_str_radix(ref$ (3 samples, 0.31%)</title><rect x="40.2893%" y="149" width="0.3099%" height="15" fill="rgb(206,124,46)" fg:x="390" fg:w="3"/><text x="40.5393%" y="159.50"></text></g><g><title>osumapchecker.exe`core::num::impl$39::from_str_radix(ref$ (3 samples, 0.31%)</title><rect x="40.2893%" y="133" width="0.3099%" height="15" fill="rgb(249,21,11)" fg:x="390" fg:w="3"/><text x="40.5393%" y="143.50"></text></g><g><title>osumapchecker.exe`core::char::methods::impl$0::to_digit (1 samples, 0.10%)</title><rect x="40.4959%" y="117" width="0.1033%" height="15" fill="rgb(222,201,40)" fg:x="392" fg:w="1"/><text x="40.7459%" y="127.50"></text></g><g><title>osumapchecker.exe`core::num::impl$8::wrapping_sub (1 samples, 0.10%)</title><rect x="40.4959%" y="101" width="0.1033%" height="15" fill="rgb(235,61,29)" fg:x="392" fg:w="1"/><text x="40.7459%" y="111.50"></text></g><g><title>osumapchecker.exe`osumapchecker::parser::BeatmapParser::is_at_end (2 samples, 0.21%)</title><rect x="40.5992%" y="181" width="0.2066%" height="15" fill="rgb(219,207,3)" fg:x="393" fg:w="2"/><text x="40.8492%" y="191.50"></text></g><g><title>osumapchecker.exe`osumapchecker::parser::BeatmapParser::parse_integer (63 samples, 6.51%)</title><rect x="37.9132%" y="197" width="6.5083%" height="15" fill="rgb(222,56,46)" fg:x="367" fg:w="63"/><text x="38.1632%" y="207.50">osumapche..</text></g><g><title>osumapchecker.exe`osumapchecker::parser::BeatmapParser::push_item(enum2$ (35 samples, 3.62%)</title><rect x="40.8058%" y="181" width="3.6157%" height="15" fill="rgb(239,76,54)" fg:x="395" fg:w="35"/><text x="41.0558%" y="191.50">osum..</text></g><g><title>osumapchecker.exe`alloc::vec::Vec&lt;osumapchecker::parser::DebugItem,alloc::alloc::Global&gt;::push (35 samples, 3.62%)</title><rect x="40.8058%" y="165" width="3.6157%" height="15" fill="rgb(231,124,27)" fg:x="395" fg:w="35"/><text x="41.0558%" y="175.50">osum..</text></g><g><title>osumapchecker.exe`core::ptr::write (32 samples, 3.31%)</title><rect x="41.1157%" y="149" width="3.3058%" height="15" fill="rgb(249,195,6)" fg:x="398" fg:w="32"/><text x="41.3657%" y="159.50">osu..</text></g><g><title>osumapchecker.exe`osumapchecker::parser::BeatmapParser::advance (15 samples, 1.55%)</title><rect x="50.9298%" y="181" width="1.5496%" height="15" fill="rgb(237,174,47)" fg:x="493" fg:w="15"/><text x="51.1798%" y="191.50"></text></g><g><title>osumapchecker.exe`osumapchecker::parser::BeatmapParser::is_at_end (18 samples, 1.86%)</title><rect x="52.4793%" y="181" width="1.8595%" height="15" fill="rgb(206,201,31)" fg:x="508" fg:w="18"/><text x="52.7293%" y="191.50">o..</text></g><g><title>osumapchecker.exe`osumapchecker::parser::BeatmapParser::peek (33 samples, 3.41%)</title><rect x="54.3388%" y="181" width="3.4091%" height="15" fill="rgb(231,57,52)" fg:x="526" fg:w="33"/><text x="54.5888%" y="191.50">osu..</text></g><g><title>osumapchecker.exe`alloc::vec::Vec&lt;osumapchecker::parser::DebugItem,alloc::alloc::Global&gt;::as_mut_ptr (1 samples, 0.10%)</title><rect x="57.8512%" y="149" width="0.1033%" height="15" fill="rgb(248,177,22)" fg:x="560" fg:w="1"/><text x="58.1012%" y="159.50"></text></g><g><title>osumapchecker.exe`alloc::vec::Vec&lt;osumapchecker::parser::DebugItem,alloc::alloc::Global&gt;::push (23 samples, 2.38%)</title><rect x="57.7479%" y="165" width="2.3760%" height="15" fill="rgb(215,211,37)" fg:x="559" fg:w="23"/><text x="57.9979%" y="175.50">os..</text></g><g><title>osumapchecker.exe`core::ptr::write (21 samples, 2.17%)</title><rect x="57.9545%" y="149" width="2.1694%" height="15" fill="rgb(241,128,51)" fg:x="561" fg:w="21"/><text x="58.2045%" y="159.50">o..</text></g><g><title>osumapchecker.exe`osumapchecker::parser::BeatmapParser::loop_hit_objects (507 samples, 52.38%)</title><rect x="7.8512%" y="245" width="52.3760%" height="15" fill="rgb(227,165,31)" fg:x="76" fg:w="507"/><text x="8.1012%" y="255.50">osumapchecker.exe`osumapchecker::parser::BeatmapParser::loop_hit_objects</text></g><g><title>osumapchecker.exe`osumapchecker::parser::BeatmapParser::parse_item_hit_objects (505 samples, 52.17%)</title><rect x="8.0579%" y="229" width="52.1694%" height="15" fill="rgb(228,167,24)" fg:x="78" fg:w="505"/><text x="8.3079%" y="239.50">osumapchecker.exe`osumapchecker::parser::BeatmapParser::parse_item_hit_objects</text></g><g><title>osumapchecker.exe`osumapchecker::parser::BeatmapParser::parse_single_hit_object (498 samples, 51.45%)</title><rect x="8.7810%" y="213" width="51.4463%" height="15" fill="rgb(228,143,12)" fg:x="85" fg:w="498"/><text x="9.0310%" y="223.50">osumapchecker.exe`osumapchecker::parser::BeatmapParser::parse_single_hit_object</text></g><g><title>osumapchecker.exe`osumapchecker::parser::BeatmapParser::parse_until_newline (153 samples, 15.81%)</title><rect x="44.4215%" y="197" width="15.8058%" height="15" fill="rgb(249,149,8)" fg:x="430" fg:w="153"/><text x="44.6715%" y="207.50">osumapchecker.exe`osumap..</text></g><g><title>osumapchecker.exe`osumapchecker::parser::BeatmapParser::push_item(enum2$ (24 samples, 2.48%)</title><rect x="57.7479%" y="181" width="2.4793%" height="15" fill="rgb(243,35,44)" fg:x="559" fg:w="24"/><text x="57.9979%" y="191.50">os..</text></g><g><title>osumapchecker.exe`core::slice::index::impl$0::index(ref$&lt;slice2$&lt;u8&gt; &gt;, core::ops::range::Range (1 samples, 0.10%)</title><rect x="60.1240%" y="165" width="0.1033%" height="15" fill="rgb(246,89,9)" fg:x="582" fg:w="1"/><text x="60.3740%" y="175.50"></text></g><g><title>osumapchecker.exe`core::slice::index::impl$4::index(core::ops::range::Range&lt;usize&gt;, ref$&lt;slice2$ (1 samples, 0.10%)</title><rect x="60.1240%" y="149" width="0.1033%" height="15" fill="rgb(233,213,13)" fg:x="582" fg:w="1"/><text x="60.3740%" y="159.50"></text></g><g><title>osumapchecker.exe`core::num::impl$11::checked_sub (1 samples, 0.10%)</title><rect x="60.1240%" y="133" width="0.1033%" height="15" fill="rgb(233,141,41)" fg:x="582" fg:w="1"/><text x="60.3740%" y="143.50"></text></g><g><title>osumapchecker.exe`osumapchecker::parser::BeatmapParser::parse_section_header (1 samples, 0.10%)</title><rect x="60.2273%" y="213" width="0.1033%" height="15" fill="rgb(239,167,4)" fg:x="583" fg:w="1"/><text x="60.4773%" y="223.50"></text></g><g><title>osumapchecker.exe`alloc::slice::impl$0::to_vec(ref$&lt;slice2$ (1 samples, 0.10%)</title><rect x="60.2273%" y="197" width="0.1033%" height="15" fill="rgb(209,217,16)" fg:x="583" fg:w="1"/><text x="60.4773%" y="207.50"></text></g><g><title>osumapchecker.exe`alloc::slice::impl$0::to_vec_in(ref$&lt;slice2$ (1 samples, 0.10%)</title><rect x="60.2273%" y="181" width="0.1033%" height="15" fill="rgb(219,88,35)" fg:x="583" fg:w="1"/><text x="60.4773%" y="191.50"></text></g><g><title>osumapchecker.exe`alloc::slice::hack::to_vec(ref$&lt;slice2$ (1 samples, 0.10%)</title><rect x="60.2273%" y="165" width="0.1033%" height="15" fill="rgb(220,193,23)" fg:x="583" fg:w="1"/><text x="60.4773%" y="175.50"></text></g><g><title>osumapchecker.exe`alloc::slice::hack::impl$1::to_vec(ref$&lt;slice2$ (1 samples, 0.10%)</title><rect x="60.2273%" y="149" width="0.1033%" height="15" fill="rgb(230,90,52)" fg:x="583" fg:w="1"/><text x="60.4773%" y="159.50"></text></g><g><title>osumapchecker.exe`alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;::with_capacity_in (1 samples, 0.10%)</title><rect x="60.2273%" y="133" width="0.1033%" height="15" fill="rgb(252,106,19)" fg:x="583" fg:w="1"/><text x="60.4773%" y="143.50"></text></g><g><title>osumapchecker.exe`alloc::raw_vec::RawVec&lt;u8,alloc::alloc::Global&gt;::with_capacity_in (1 samples, 0.10%)</title><rect x="60.2273%" y="117" width="0.1033%" height="15" fill="rgb(206,74,20)" fg:x="583" fg:w="1"/><text x="60.4773%" y="127.50"></text></g><g><title>osumapchecker.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::with_capacity_in (1 samples, 0.10%)</title><rect x="60.2273%" y="101" width="0.1033%" height="15" fill="rgb(230,138,44)" fg:x="583" fg:w="1"/><text x="60.4773%" y="111.50"></text></g><g><title>osumapchecker.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::try_allocate_in (1 samples, 0.10%)</title><rect x="60.2273%" y="85" width="0.1033%" height="15" fill="rgb(235,182,43)" fg:x="583" fg:w="1"/><text x="60.4773%" y="95.50"></text></g><g><title>`0x7FFB749DB3C7 (1 samples, 0.10%)</title><rect x="60.2273%" y="69" width="0.1033%" height="15" fill="rgb(242,16,51)" fg:x="583" fg:w="1"/><text x="60.4773%" y="79.50"></text></g><g><title>`0x7FFB749DB7A2 (1 samples, 0.10%)</title><rect x="60.2273%" y="53" width="0.1033%" height="15" fill="rgb(248,9,4)" fg:x="583" fg:w="1"/><text x="60.4773%" y="63.50"></text></g><g><title>osumapchecker.exe`osumapchecker::parser::BeatmapParser::loop_only_section_headers (5 samples, 0.52%)</title><rect x="60.2273%" y="245" width="0.5165%" height="15" fill="rgb(210,31,22)" fg:x="583" fg:w="5"/><text x="60.4773%" y="255.50"></text></g><g><title>osumapchecker.exe`osumapchecker::parser::BeatmapParser::parse_item_only_section_headers (5 samples, 0.52%)</title><rect x="60.2273%" y="229" width="0.5165%" height="15" fill="rgb(239,54,39)" fg:x="583" fg:w="5"/><text x="60.4773%" y="239.50"></text></g><g><title>osumapchecker.exe`osumapchecker::parser::BeatmapParser::parse_until_newline (4 samples, 0.41%)</title><rect x="60.3306%" y="213" width="0.4132%" height="15" fill="rgb(230,99,41)" fg:x="584" fg:w="4"/><text x="60.5806%" y="223.50"></text></g><g><title>osumapchecker.exe`osumapchecker::parser::BeatmapParser::is_at_end (1 samples, 0.10%)</title><rect x="60.6405%" y="197" width="0.1033%" height="15" fill="rgb(253,106,12)" fg:x="587" fg:w="1"/><text x="60.8905%" y="207.50"></text></g><g><title>osumapchecker.exe`osumapchecker::parser::BeatmapParser::is_at_end (4 samples, 0.41%)</title><rect x="60.7438%" y="229" width="0.4132%" height="15" fill="rgb(213,46,41)" fg:x="588" fg:w="4"/><text x="60.9938%" y="239.50"></text></g><g><title>osumapchecker.exe`osumapchecker::parser::BeatmapParser::advance (5 samples, 0.52%)</title><rect x="61.1570%" y="213" width="0.5165%" height="15" fill="rgb(215,133,35)" fg:x="592" fg:w="5"/><text x="61.4070%" y="223.50"></text></g><g><title>osumapchecker.exe`core::slice::index::impl$0::index(ref$&lt;slice2$&lt;u8&gt; &gt;, core::ops::range::Range (4 samples, 0.41%)</title><rect x="72.9339%" y="149" width="0.4132%" height="15" fill="rgb(213,28,5)" fg:x="706" fg:w="4"/><text x="73.1839%" y="159.50"></text></g><g><title>osumapchecker.exe`core::slice::index::impl$4::index(core::ops::range::Range&lt;usize&gt;, ref$&lt;slice2$ (4 samples, 0.41%)</title><rect x="72.9339%" y="133" width="0.4132%" height="15" fill="rgb(215,77,49)" fg:x="706" fg:w="4"/><text x="73.1839%" y="143.50"></text></g><g><title>osumapchecker.exe`core::num::impl$11::checked_sub (2 samples, 0.21%)</title><rect x="73.1405%" y="117" width="0.2066%" height="15" fill="rgb(248,100,22)" fg:x="708" fg:w="2"/><text x="73.3905%" y="127.50"></text></g><g><title>osumapchecker.exe`core::str::impl$0::parse(ref$ (20 samples, 2.07%)</title><rect x="73.3471%" y="149" width="2.0661%" height="15" fill="rgb(208,67,9)" fg:x="710" fg:w="20"/><text x="73.5971%" y="159.50">o..</text></g><g><title>osumapchecker.exe`core::num::impl$19::from_str(ref$ (20 samples, 2.07%)</title><rect x="73.3471%" y="133" width="2.0661%" height="15" fill="rgb(219,133,21)" fg:x="710" fg:w="20"/><text x="73.5971%" y="143.50">o..</text></g><g><title>osumapchecker.exe`core::num::impl$41::from_str_radix(ref$ (20 samples, 2.07%)</title><rect x="73.3471%" y="117" width="2.0661%" height="15" fill="rgb(246,46,29)" fg:x="710" fg:w="20"/><text x="73.5971%" y="127.50">o..</text></g><g><title>osumapchecker.exe`core::num::impl$39::from_str_radix(ref$ (20 samples, 2.07%)</title><rect x="73.3471%" y="101" width="2.0661%" height="15" fill="rgb(246,185,52)" fg:x="710" fg:w="20"/><text x="73.5971%" y="111.50">o..</text></g><g><title>osumapchecker.exe`core::char::methods::impl$0::to_digit (1 samples, 0.10%)</title><rect x="75.3099%" y="85" width="0.1033%" height="15" fill="rgb(252,136,11)" fg:x="729" fg:w="1"/><text x="75.5599%" y="95.50"></text></g><g><title>osumapchecker.exe`core::num::impl$8::wrapping_sub (1 samples, 0.10%)</title><rect x="75.3099%" y="69" width="0.1033%" height="15" fill="rgb(219,138,53)" fg:x="729" fg:w="1"/><text x="75.5599%" y="79.50"></text></g><g><title>osumapchecker.exe`osumapchecker::parser::BeatmapParser::advance (5 samples, 0.52%)</title><rect x="75.4132%" y="149" width="0.5165%" height="15" fill="rgb(211,51,23)" fg:x="730" fg:w="5"/><text x="75.6632%" y="159.50"></text></g><g><title>osumapchecker.exe`osumapchecker::parser::BeatmapParser::is_at_end (11 samples, 1.14%)</title><rect x="75.9298%" y="149" width="1.1364%" height="15" fill="rgb(247,221,28)" fg:x="735" fg:w="11"/><text x="76.1798%" y="159.50"></text></g><g><title>osumapchecker.exe`alloc::vec::Vec&lt;osumapchecker::parser::DebugItem,alloc::alloc::Global&gt;::as_mut_ptr (1 samples, 0.10%)</title><rect x="78.0992%" y="117" width="0.1033%" height="15" fill="rgb(251,222,45)" fg:x="756" fg:w="1"/><text x="78.3492%" y="127.50"></text></g><g><title>osumapchecker.exe`osumapchecker::parser::BeatmapParser::match (178 samples, 18.39%)</title><rect x="64.4628%" y="197" width="18.3884%" height="15" fill="rgb(217,162,53)" fg:x="624" fg:w="178"/><text x="64.7128%" y="207.50">osumapchecker.exe`osumapcheck..</text></g><g><title>osumapchecker.exe`osumapchecker::parser::BeatmapParser::is_at_end (159 samples, 16.43%)</title><rect x="66.4256%" y="181" width="16.4256%" height="15" fill="rgb(229,93,14)" fg:x="643" fg:w="159"/><text x="66.6756%" y="191.50">osumapchecker.exe`osumapc..</text></g><g><title>osumapchecker.exe`osumapchecker::parser::BeatmapParser::parse_integer (157 samples, 16.22%)</title><rect x="66.6322%" y="165" width="16.2190%" height="15" fill="rgb(209,67,49)" fg:x="645" fg:w="157"/><text x="66.8822%" y="175.50">osumapchecker.exe`osumapc..</text></g><g><title>osumapchecker.exe`osumapchecker::parser::BeatmapParser::push_item(enum2$ (56 samples, 5.79%)</title><rect x="77.0661%" y="149" width="5.7851%" height="15" fill="rgb(213,87,29)" fg:x="746" fg:w="56"/><text x="77.3161%" y="159.50">osumapc..</text></g><g><title>osumapchecker.exe`alloc::vec::Vec&lt;osumapchecker::parser::DebugItem,alloc::alloc::Global&gt;::push (56 samples, 5.79%)</title><rect x="77.0661%" y="133" width="5.7851%" height="15" fill="rgb(205,151,52)" fg:x="746" fg:w="56"/><text x="77.3161%" y="143.50">osumapc..</text></g><g><title>osumapchecker.exe`core::ptr::write (45 samples, 4.65%)</title><rect x="78.2025%" y="117" width="4.6488%" height="15" fill="rgb(253,215,39)" fg:x="757" fg:w="45"/><text x="78.4525%" y="127.50">osuma..</text></g><g><title>osumapchecker.exe`core::num::dec2flt::number::Number::try_fast_path (9 samples, 0.93%)</title><rect x="84.4008%" y="149" width="0.9298%" height="15" fill="rgb(221,220,41)" fg:x="817" fg:w="9"/><text x="84.6508%" y="159.50"></text></g><g><title>osumapchecker.exe`core::num::dec2flt::number::Number::is_fast_path (1 samples, 0.10%)</title><rect x="85.2273%" y="133" width="0.1033%" height="15" fill="rgb(218,133,21)" fg:x="825" fg:w="1"/><text x="85.4773%" y="143.50"></text></g><g><title>osumapchecker.exe`core::num::dec2flt::parse::try_parse_digits::closure$0 (3 samples, 0.31%)</title><rect x="86.1570%" y="85" width="0.3099%" height="15" fill="rgb(221,193,43)" fg:x="834" fg:w="3"/><text x="86.4070%" y="95.50"></text></g><g><title>osumapchecker.exe`core::num::impl$6::wrapping_sub (1 samples, 0.10%)</title><rect x="86.4669%" y="85" width="0.1033%" height="15" fill="rgb(240,128,52)" fg:x="837" fg:w="1"/><text x="86.7169%" y="95.50"></text></g><g><title>osumapchecker.exe`core::num::dec2flt::common::impl$0::parse_digits (13 samples, 1.34%)</title><rect x="85.9504%" y="101" width="1.3430%" height="15" fill="rgb(253,114,12)" fg:x="832" fg:w="13"/><text x="86.2004%" y="111.50"></text></g><g><title>osumapchecker.exe`core::slice::impl$0::split_first (7 samples, 0.72%)</title><rect x="86.5702%" y="85" width="0.7231%" height="15" fill="rgb(215,223,47)" fg:x="838" fg:w="7"/><text x="86.8202%" y="95.50"></text></g><g><title>osumapchecker.exe`core::num::impl$9::wrapping_mul (5 samples, 0.52%)</title><rect x="87.2934%" y="101" width="0.5165%" height="15" fill="rgb(248,225,23)" fg:x="845" fg:w="5"/><text x="87.5434%" y="111.50"></text></g><g><title>osumapchecker.exe`core::num::impl$9::wrapping_add (1 samples, 0.10%)</title><rect x="87.7066%" y="85" width="0.1033%" height="15" fill="rgb(250,108,0)" fg:x="849" fg:w="1"/><text x="87.9566%" y="95.50"></text></g><g><title>osumapchecker.exe`core::num::dec2flt::parse::try_parse_digits (24 samples, 2.48%)</title><rect x="85.4339%" y="117" width="2.4793%" height="15" fill="rgb(228,208,7)" fg:x="827" fg:w="24"/><text x="85.6839%" y="127.50">os..</text></g><g><title>osumapchecker.exe`core::slice::index::impl$0::index (1 samples, 0.10%)</title><rect x="87.8099%" y="101" width="0.1033%" height="15" fill="rgb(244,45,10)" fg:x="850" fg:w="1"/><text x="88.0599%" y="111.50"></text></g><g><title>osumapchecker.exe`core::slice::index::impl$7::index (1 samples, 0.10%)</title><rect x="87.8099%" y="85" width="0.1033%" height="15" fill="rgb(207,125,25)" fg:x="850" fg:w="1"/><text x="88.0599%" y="95.50"></text></g><g><title>osumapchecker.exe`core::slice::index::impl$7::get_unchecked (1 samples, 0.10%)</title><rect x="87.8099%" y="69" width="0.1033%" height="15" fill="rgb(210,195,18)" fg:x="850" fg:w="1"/><text x="88.0599%" y="79.50"></text></g><g><title>osumapchecker.exe`core::slice::index::impl$4::get_unchecked (1 samples, 0.10%)</title><rect x="87.8099%" y="53" width="0.1033%" height="15" fill="rgb(249,80,12)" fg:x="850" fg:w="1"/><text x="88.0599%" y="63.50"></text></g><g><title>osumapchecker.exe`core::num::dec2flt::impl$3::from_str (45 samples, 4.65%)</title><rect x="83.3678%" y="181" width="4.6488%" height="15" fill="rgb(221,65,9)" fg:x="807" fg:w="45"/><text x="83.6178%" y="191.50">osuma..</text></g><g><title>osumapchecker.exe`core::num::dec2flt::dec2flt (37 samples, 3.82%)</title><rect x="84.1942%" y="165" width="3.8223%" height="15" fill="rgb(235,49,36)" fg:x="815" fg:w="37"/><text x="84.4442%" y="175.50">osum..</text></g><g><title>osumapchecker.exe`core::num::dec2flt::parse::parse_number (26 samples, 2.69%)</title><rect x="85.3306%" y="149" width="2.6860%" height="15" fill="rgb(225,32,20)" fg:x="826" fg:w="26"/><text x="85.5806%" y="159.50">os..</text></g><g><title>osumapchecker.exe`core::num::dec2flt::parse::parse_partial_number (26 samples, 2.69%)</title><rect x="85.3306%" y="133" width="2.6860%" height="15" fill="rgb(215,141,46)" fg:x="826" fg:w="26"/><text x="85.5806%" y="143.50">os..</text></g><g><title>osumapchecker.exe`core::slice::impl$0::split_first (1 samples, 0.10%)</title><rect x="87.9132%" y="117" width="0.1033%" height="15" fill="rgb(250,160,47)" fg:x="851" fg:w="1"/><text x="88.1632%" y="127.50"></text></g><g><title>osumapchecker.exe`core::num::impl$6::is_ascii_digit (16 samples, 1.65%)</title><rect x="88.0165%" y="181" width="1.6529%" height="15" fill="rgb(216,222,40)" fg:x="852" fg:w="16"/><text x="88.2665%" y="191.50"></text></g><g><title>osumapchecker.exe`core::slice::index::impl$0::index(ref$&lt;slice2$&lt;u8&gt; &gt;, core::ops::range::Range (4 samples, 0.41%)</title><rect x="89.6694%" y="181" width="0.4132%" height="15" fill="rgb(234,217,39)" fg:x="868" fg:w="4"/><text x="89.9194%" y="191.50"></text></g><g><title>osumapchecker.exe`core::slice::index::impl$4::index(core::ops::range::Range&lt;usize&gt;, ref$&lt;slice2$ (4 samples, 0.41%)</title><rect x="89.6694%" y="165" width="0.4132%" height="15" fill="rgb(207,178,40)" fg:x="868" fg:w="4"/><text x="89.9194%" y="175.50"></text></g><g><title>osumapchecker.exe`core::num::impl$11::checked_sub (4 samples, 0.41%)</title><rect x="89.6694%" y="149" width="0.4132%" height="15" fill="rgb(221,136,13)" fg:x="868" fg:w="4"/><text x="89.9194%" y="159.50"></text></g><g><title>osumapchecker.exe`core::str::impl$0::parse(ref$ (1 samples, 0.10%)</title><rect x="90.0826%" y="181" width="0.1033%" height="15" fill="rgb(249,199,10)" fg:x="872" fg:w="1"/><text x="90.3326%" y="191.50"></text></g><g><title>osumapchecker.exe`osumapchecker::parser::BeatmapParser::advance (13 samples, 1.34%)</title><rect x="90.1860%" y="181" width="1.3430%" height="15" fill="rgb(249,222,13)" fg:x="873" fg:w="13"/><text x="90.4360%" y="191.50"></text></g><g><title>osumapchecker.exe`osumapchecker::parser::BeatmapParser::parse_float (100 samples, 10.33%)</title><rect x="82.8512%" y="197" width="10.3306%" height="15" fill="rgb(244,185,38)" fg:x="802" fg:w="100"/><text x="83.1012%" y="207.50">osumapchecker.e..</text></g><g><title>osumapchecker.exe`osumapchecker::parser::BeatmapParser::push_item(enum2$ (16 samples, 1.65%)</title><rect x="91.5289%" y="181" width="1.6529%" height="15" fill="rgb(236,202,9)" fg:x="886" fg:w="16"/><text x="91.7789%" y="191.50"></text></g><g><title>osumapchecker.exe`alloc::vec::Vec&lt;osumapchecker::parser::DebugItem,alloc::alloc::Global&gt;::push (16 samples, 1.65%)</title><rect x="91.5289%" y="165" width="1.6529%" height="15" fill="rgb(250,229,37)" fg:x="886" fg:w="16"/><text x="91.7789%" y="175.50"></text></g><g><title>osumapchecker.exe`core::ptr::write (14 samples, 1.45%)</title><rect x="91.7355%" y="149" width="1.4463%" height="15" fill="rgb(206,174,23)" fg:x="888" fg:w="14"/><text x="91.9855%" y="159.50"></text></g><g><title>osumapchecker.exe`core::str::impl$0::parse(ref$ (1 samples, 0.10%)</title><rect x="94.7314%" y="181" width="0.1033%" height="15" fill="rgb(211,33,43)" fg:x="917" fg:w="1"/><text x="94.9814%" y="191.50"></text></g><g><title>osumapchecker.exe`core::num::impl$19::from_str(ref$ (1 samples, 0.10%)</title><rect x="94.7314%" y="165" width="0.1033%" height="15" fill="rgb(245,58,50)" fg:x="917" fg:w="1"/><text x="94.9814%" y="175.50"></text></g><g><title>osumapchecker.exe`core::num::impl$41::from_str_radix(ref$ (1 samples, 0.10%)</title><rect x="94.7314%" y="149" width="0.1033%" height="15" fill="rgb(244,68,36)" fg:x="917" fg:w="1"/><text x="94.9814%" y="159.50"></text></g><g><title>osumapchecker.exe`core::num::impl$39::from_str_radix(ref$ (1 samples, 0.10%)</title><rect x="94.7314%" y="133" width="0.1033%" height="15" fill="rgb(232,229,15)" fg:x="917" fg:w="1"/><text x="94.9814%" y="143.50"></text></g><g><title>osumapchecker.exe`osumapchecker::parser::BeatmapParser::advance (1 samples, 0.10%)</title><rect x="94.8347%" y="181" width="0.1033%" height="15" fill="rgb(254,30,23)" fg:x="918" fg:w="1"/><text x="95.0847%" y="191.50"></text></g><g><title>osumapchecker.exe`osumapchecker::parser::BeatmapParser::is_at_end (4 samples, 0.41%)</title><rect x="94.9380%" y="181" width="0.4132%" height="15" fill="rgb(235,160,14)" fg:x="919" fg:w="4"/><text x="95.1880%" y="191.50"></text></g><g><title>osumapchecker.exe`osumapchecker::parser::BeatmapParser::parse_integer (31 samples, 3.20%)</title><rect x="93.1818%" y="197" width="3.2025%" height="15" fill="rgb(212,155,44)" fg:x="902" fg:w="31"/><text x="93.4318%" y="207.50">osu..</text></g><g><title>osumapchecker.exe`osumapchecker::parser::BeatmapParser::push_item(enum2$ (10 samples, 1.03%)</title><rect x="95.3512%" y="181" width="1.0331%" height="15" fill="rgb(226,2,50)" fg:x="923" fg:w="10"/><text x="95.6012%" y="191.50"></text></g><g><title>osumapchecker.exe`alloc::vec::Vec&lt;osumapchecker::parser::DebugItem,alloc::alloc::Global&gt;::push (10 samples, 1.03%)</title><rect x="95.3512%" y="165" width="1.0331%" height="15" fill="rgb(234,177,6)" fg:x="923" fg:w="10"/><text x="95.6012%" y="175.50"></text></g><g><title>osumapchecker.exe`core::ptr::write (10 samples, 1.03%)</title><rect x="95.3512%" y="149" width="1.0331%" height="15" fill="rgb(217,24,9)" fg:x="923" fg:w="10"/><text x="95.6012%" y="159.50"></text></g><g><title>osumapchecker.exe`osumapchecker::parser::BeatmapParser::peek (1 samples, 0.10%)</title><rect x="97.3140%" y="181" width="0.1033%" height="15" fill="rgb(220,13,46)" fg:x="942" fg:w="1"/><text x="97.5640%" y="191.50"></text></g><g><title>`0x7FFB749FCC91 (949 samples, 98.04%)</title><rect x="0.2066%" y="533" width="98.0372%" height="15" fill="rgb(239,221,27)" fg:x="2" fg:w="949"/><text x="0.4566%" y="543.50">`0x7FFB749FCC91</text></g><g><title>`0x7FFB73317374 (949 samples, 98.04%)</title><rect x="0.2066%" y="517" width="98.0372%" height="15" fill="rgb(222,198,25)" fg:x="2" fg:w="949"/><text x="0.4566%" y="527.50">`0x7FFB73317374</text></g><g><title>osumapchecker.exe`__scrt_common_main_seh() (943 samples, 97.42%)</title><rect x="0.8264%" y="501" width="97.4174%" height="15" fill="rgb(211,99,13)" fg:x="8" fg:w="943"/><text x="1.0764%" y="511.50">osumapchecker.exe`__scrt_common_main_seh()</text></g><g><title>osumapchecker.exe`invoke_main() (936 samples, 96.69%)</title><rect x="1.5496%" y="485" width="96.6942%" height="15" fill="rgb(232,111,31)" fg:x="15" fg:w="936"/><text x="1.7996%" y="495.50">osumapchecker.exe`invoke_main()</text></g><g><title>osumapchecker.exe`main (936 samples, 96.69%)</title><rect x="1.5496%" y="469" width="96.6942%" height="15" fill="rgb(245,82,37)" fg:x="15" fg:w="936"/><text x="1.7996%" y="479.50">osumapchecker.exe`main</text></g><g><title>osumapchecker.exe`std::rt::lang_start_internal (936 samples, 96.69%)</title><rect x="1.5496%" y="453" width="96.6942%" height="15" fill="rgb(227,149,46)" fg:x="15" fg:w="936"/><text x="1.7996%" y="463.50">osumapchecker.exe`std::rt::lang_start_internal</text></g><g><title>osumapchecker.exe`std::panic::catch_unwind (936 samples, 96.69%)</title><rect x="1.5496%" y="437" width="96.6942%" height="15" fill="rgb(218,36,50)" fg:x="15" fg:w="936"/><text x="1.7996%" y="447.50">osumapchecker.exe`std::panic::catch_unwind</text></g><g><title>osumapchecker.exe`std::panicking::try (936 samples, 96.69%)</title><rect x="1.5496%" y="421" width="96.6942%" height="15" fill="rgb(226,80,48)" fg:x="15" fg:w="936"/><text x="1.7996%" y="431.50">osumapchecker.exe`std::panicking::try</text></g><g><title>osumapchecker.exe`std::panicking::try::do_call (936 samples, 96.69%)</title><rect x="1.5496%" y="405" width="96.6942%" height="15" fill="rgb(238,224,15)" fg:x="15" fg:w="936"/><text x="1.7996%" y="415.50">osumapchecker.exe`std::panicking::try::do_call</text></g><g><title>osumapchecker.exe`std::rt::lang_start_internal::closure$1 (936 samples, 96.69%)</title><rect x="1.5496%" y="389" width="96.6942%" height="15" fill="rgb(241,136,10)" fg:x="15" fg:w="936"/><text x="1.7996%" y="399.50">osumapchecker.exe`std::rt::lang_start_internal::closure$1</text></g><g><title>osumapchecker.exe`std::panic::catch_unwind (936 samples, 96.69%)</title><rect x="1.5496%" y="373" width="96.6942%" height="15" fill="rgb(208,32,45)" fg:x="15" fg:w="936"/><text x="1.7996%" y="383.50">osumapchecker.exe`std::panic::catch_unwind</text></g><g><title>osumapchecker.exe`std::rt::lang_start::closure$0&lt;tuple$&lt;&gt; &gt;(std::rt::lang_start::closure_env$0&lt;tuple$ (936 samples, 96.69%)</title><rect x="1.5496%" y="357" width="96.6942%" height="15" fill="rgb(207,135,9)" fg:x="15" fg:w="936"/><text x="1.7996%" y="367.50">osumapchecker.exe`std::rt::lang_start::closure$0&lt;tuple$&lt;&gt; &gt;(std::rt::lang_start::closure_env$0&lt;tuple$</text></g><g><title>osumapchecker.exe`std::sys::backtrace::__rust_begin_short_backtrace&lt;void (*)(),tuple$&lt;&gt; &gt;(void (*) (935 samples, 96.59%)</title><rect x="1.6529%" y="341" width="96.5909%" height="15" fill="rgb(206,86,44)" fg:x="16" fg:w="935"/><text x="1.9029%" y="351.50">osumapchecker.exe`std::sys::backtrace::__rust_begin_short_backtrace&lt;void (*)(),tuple$&lt;&gt; &gt;(void (*)</text></g><g><title>osumapchecker.exe`osumapchecker::main (935 samples, 96.59%)</title><rect x="1.6529%" y="325" width="96.5909%" height="15" fill="rgb(245,177,15)" fg:x="16" fg:w="935"/><text x="1.9029%" y="335.50">osumapchecker.exe`osumapchecker::main</text></g><g><title>osumapchecker.exe`voxell_timer::time_fn (876 samples, 90.50%)</title><rect x="7.7479%" y="309" width="90.4959%" height="15" fill="rgb(206,64,50)" fg:x="75" fg:w="876"/><text x="7.9979%" y="319.50">osumapchecker.exe`voxell_timer::time_fn</text></g><g><title>osumapchecker.exe`osumapchecker::main::closure$0 (876 samples, 90.50%)</title><rect x="7.7479%" y="293" width="90.4959%" height="15" fill="rgb(234,36,40)" fg:x="75" fg:w="876"/><text x="7.9979%" y="303.50">osumapchecker.exe`osumapchecker::main::closure$0</text></g><g><title>osumapchecker.exe`osumapchecker::parser::BeatmapParser::parse_debug (876 samples, 90.50%)</title><rect x="7.7479%" y="277" width="90.4959%" height="15" fill="rgb(213,64,8)" fg:x="75" fg:w="876"/><text x="7.9979%" y="287.50">osumapchecker.exe`osumapchecker::parser::BeatmapParser::parse_debug</text></g><g><title>osumapchecker.exe`osumapchecker::parser::BeatmapParser::parse_generic (876 samples, 90.50%)</title><rect x="7.7479%" y="261" width="90.4959%" height="15" fill="rgb(210,75,36)" fg:x="75" fg:w="876"/><text x="7.9979%" y="271.50">osumapchecker.exe`osumapchecker::parser::BeatmapParser::parse_generic</text></g><g><title>osumapchecker.exe`osumapchecker::parser::BeatmapParser::loop_timing_points (363 samples, 37.50%)</title><rect x="60.7438%" y="245" width="37.5000%" height="15" fill="rgb(229,88,21)" fg:x="588" fg:w="363"/><text x="60.9938%" y="255.50">osumapchecker.exe`osumapchecker::parser::BeatmapParser::loop_..</text></g><g><title>osumapchecker.exe`osumapchecker::parser::BeatmapParser::parse_item_timing_points (359 samples, 37.09%)</title><rect x="61.1570%" y="229" width="37.0868%" height="15" fill="rgb(252,204,47)" fg:x="592" fg:w="359"/><text x="61.4070%" y="239.50">osumapchecker.exe`osumapchecker::parser::BeatmapParser::pars..</text></g><g><title>osumapchecker.exe`osumapchecker::parser::BeatmapParser::parse_single_timing_point (354 samples, 36.57%)</title><rect x="61.6736%" y="213" width="36.5702%" height="15" fill="rgb(208,77,27)" fg:x="597" fg:w="354"/><text x="61.9236%" y="223.50">osumapchecker.exe`osumapchecker::parser::BeatmapParser::par..</text></g><g><title>osumapchecker.exe`osumapchecker::parser::BeatmapParser::parse_until_newline (18 samples, 1.86%)</title><rect x="96.3843%" y="197" width="1.8595%" height="15" fill="rgb(221,76,26)" fg:x="933" fg:w="18"/><text x="96.6343%" y="207.50">o..</text></g><g><title>osumapchecker.exe`osumapchecker::parser::BeatmapParser::push_item(enum2$ (8 samples, 0.83%)</title><rect x="97.4174%" y="181" width="0.8264%" height="15" fill="rgb(225,139,18)" fg:x="943" fg:w="8"/><text x="97.6674%" y="191.50"></text></g><g><title>osumapchecker.exe`alloc::vec::Vec&lt;osumapchecker::parser::DebugItem,alloc::alloc::Global&gt;::push (8 samples, 0.83%)</title><rect x="97.4174%" y="165" width="0.8264%" height="15" fill="rgb(230,137,11)" fg:x="943" fg:w="8"/><text x="97.6674%" y="175.50"></text></g><g><title>osumapchecker.exe`core::ptr::write (5 samples, 0.52%)</title><rect x="97.7273%" y="149" width="0.5165%" height="15" fill="rgb(212,28,1)" fg:x="946" fg:w="5"/><text x="97.9773%" y="159.50"></text></g><g><title>`0x7FFB74A81EA9 (1 samples, 0.10%)</title><rect x="98.2438%" y="485" width="0.1033%" height="15" fill="rgb(248,164,17)" fg:x="951" fg:w="1"/><text x="98.4938%" y="495.50"></text></g><g><title>`0x7FFB74A81D36 (1 samples, 0.10%)</title><rect x="98.2438%" y="469" width="0.1033%" height="15" fill="rgb(222,171,42)" fg:x="951" fg:w="1"/><text x="98.4938%" y="479.50"></text></g><g><title>`0x7FFB74A95391 (1 samples, 0.10%)</title><rect x="98.2438%" y="453" width="0.1033%" height="15" fill="rgb(243,84,45)" fg:x="951" fg:w="1"/><text x="98.4938%" y="463.50"></text></g><g><title>`0x7FFB74A95284 (1 samples, 0.10%)</title><rect x="98.2438%" y="437" width="0.1033%" height="15" fill="rgb(252,49,23)" fg:x="951" fg:w="1"/><text x="98.4938%" y="447.50"></text></g><g><title>`0x7FFB74A82182 (1 samples, 0.10%)</title><rect x="98.3471%" y="485" width="0.1033%" height="15" fill="rgb(215,19,7)" fg:x="952" fg:w="1"/><text x="98.5971%" y="495.50"></text></g><g><title>`0x7FFB74A81935 (1 samples, 0.10%)</title><rect x="98.3471%" y="469" width="0.1033%" height="15" fill="rgb(238,81,41)" fg:x="952" fg:w="1"/><text x="98.5971%" y="479.50"></text></g><g><title>`0x7FFB74AA2C1B (1 samples, 0.10%)</title><rect x="98.3471%" y="453" width="0.1033%" height="15" fill="rgb(210,199,37)" fg:x="952" fg:w="1"/><text x="98.5971%" y="463.50"></text></g><g><title>`0x7FFB74AA431D (1 samples, 0.10%)</title><rect x="98.3471%" y="437" width="0.1033%" height="15" fill="rgb(244,192,49)" fg:x="952" fg:w="1"/><text x="98.5971%" y="447.50"></text></g><g><title>`0x7FFB74A4D734 (1 samples, 0.10%)</title><rect x="98.3471%" y="421" width="0.1033%" height="15" fill="rgb(226,211,11)" fg:x="952" fg:w="1"/><text x="98.5971%" y="431.50"></text></g><g><title>`0x7FFB74A82878 (1 samples, 0.10%)</title><rect x="98.4504%" y="485" width="0.1033%" height="15" fill="rgb(236,162,54)" fg:x="953" fg:w="1"/><text x="98.7004%" y="495.50"></text></g><g><title>`0x7FFB749F2EA0 (1 samples, 0.10%)</title><rect x="98.4504%" y="469" width="0.1033%" height="15" fill="rgb(220,229,9)" fg:x="953" fg:w="1"/><text x="98.7004%" y="479.50"></text></g><g><title>`0x7FFB749F30E5 (1 samples, 0.10%)</title><rect x="98.4504%" y="453" width="0.1033%" height="15" fill="rgb(250,87,22)" fg:x="953" fg:w="1"/><text x="98.7004%" y="463.50"></text></g><g><title>`0x7FFB749F2F43 (1 samples, 0.10%)</title><rect x="98.4504%" y="437" width="0.1033%" height="15" fill="rgb(239,43,17)" fg:x="953" fg:w="1"/><text x="98.7004%" y="447.50"></text></g><g><title>`0x7FFB749F38C0 (1 samples, 0.10%)</title><rect x="98.4504%" y="421" width="0.1033%" height="15" fill="rgb(231,177,25)" fg:x="953" fg:w="1"/><text x="98.7004%" y="431.50"></text></g><g><title>`0x7FFB74A2E41E (1 samples, 0.10%)</title><rect x="98.4504%" y="405" width="0.1033%" height="15" fill="rgb(219,179,1)" fg:x="953" fg:w="1"/><text x="98.7004%" y="415.50"></text></g><g><title>`0x7FFB749BE02C (1 samples, 0.10%)</title><rect x="98.4504%" y="389" width="0.1033%" height="15" fill="rgb(238,219,53)" fg:x="953" fg:w="1"/><text x="98.7004%" y="399.50"></text></g><g><title>`0x7FFB749C09A3 (1 samples, 0.10%)</title><rect x="98.4504%" y="373" width="0.1033%" height="15" fill="rgb(232,167,36)" fg:x="953" fg:w="1"/><text x="98.7004%" y="383.50"></text></g><g><title>`0x7FFB749C22CD (1 samples, 0.10%)</title><rect x="98.4504%" y="357" width="0.1033%" height="15" fill="rgb(244,19,51)" fg:x="953" fg:w="1"/><text x="98.7004%" y="367.50"></text></g><g><title>`0x7FFB749C2634 (1 samples, 0.10%)</title><rect x="98.4504%" y="341" width="0.1033%" height="15" fill="rgb(224,6,22)" fg:x="953" fg:w="1"/><text x="98.7004%" y="351.50"></text></g><g><title>`0x7FFB749C388C (1 samples, 0.10%)</title><rect x="98.4504%" y="325" width="0.1033%" height="15" fill="rgb(224,145,5)" fg:x="953" fg:w="1"/><text x="98.7004%" y="335.50"></text></g><g><title>`0x7FFB74A12F76 (1 samples, 0.10%)</title><rect x="98.4504%" y="309" width="0.1033%" height="15" fill="rgb(234,130,49)" fg:x="953" fg:w="1"/><text x="98.7004%" y="319.50"></text></g><g><title>`0x7FFB74A4EA84 (1 samples, 0.10%)</title><rect x="98.4504%" y="293" width="0.1033%" height="15" fill="rgb(254,6,2)" fg:x="953" fg:w="1"/><text x="98.7004%" y="303.50"></text></g><g><title>`0x7FFB74A83070 (1 samples, 0.10%)</title><rect x="98.5537%" y="485" width="0.1033%" height="15" fill="rgb(208,96,46)" fg:x="954" fg:w="1"/><text x="98.8037%" y="495.50"></text></g><g><title>`0x7FFB749C69BD (1 samples, 0.10%)</title><rect x="98.5537%" y="469" width="0.1033%" height="15" fill="rgb(239,3,39)" fg:x="954" fg:w="1"/><text x="98.8037%" y="479.50"></text></g><g><title>`0x7FFB749C4AAA (1 samples, 0.10%)</title><rect x="98.6570%" y="389" width="0.1033%" height="15" fill="rgb(233,210,1)" fg:x="955" fg:w="1"/><text x="98.9070%" y="399.50"></text></g><g><title>`0x7FFB749C4D42 (1 samples, 0.10%)</title><rect x="98.6570%" y="373" width="0.1033%" height="15" fill="rgb(244,137,37)" fg:x="955" fg:w="1"/><text x="98.9070%" y="383.50"></text></g><g><title>`0x7FFB74A4D9F4 (1 samples, 0.10%)</title><rect x="98.6570%" y="357" width="0.1033%" height="15" fill="rgb(240,136,2)" fg:x="955" fg:w="1"/><text x="98.9070%" y="367.50"></text></g><g><title>`0x7FFB749C7B29 (1 samples, 0.10%)</title><rect x="98.7603%" y="373" width="0.1033%" height="15" fill="rgb(239,18,37)" fg:x="956" fg:w="1"/><text x="99.0103%" y="383.50"></text></g><g><title>`0x7FFB749C88A8 (1 samples, 0.10%)</title><rect x="98.7603%" y="357" width="0.1033%" height="15" fill="rgb(218,185,22)" fg:x="956" fg:w="1"/><text x="99.0103%" y="367.50"></text></g><g><title>`0x7FFB749C4479 (1 samples, 0.10%)</title><rect x="98.7603%" y="341" width="0.1033%" height="15" fill="rgb(225,218,4)" fg:x="956" fg:w="1"/><text x="99.0103%" y="351.50"></text></g><g><title>`0x7FFB749C4BCF (1 samples, 0.10%)</title><rect x="98.7603%" y="325" width="0.1033%" height="15" fill="rgb(230,182,32)" fg:x="956" fg:w="1"/><text x="99.0103%" y="335.50"></text></g><g><title>`0x7FFB749BFB05 (1 samples, 0.10%)</title><rect x="98.7603%" y="309" width="0.1033%" height="15" fill="rgb(242,56,43)" fg:x="956" fg:w="1"/><text x="99.0103%" y="319.50"></text></g><g><title>`0x7FFB749C0921 (1 samples, 0.10%)</title><rect x="98.7603%" y="293" width="0.1033%" height="15" fill="rgb(233,99,24)" fg:x="956" fg:w="1"/><text x="99.0103%" y="303.50"></text></g><g><title>`0x7FFB749C2252 (1 samples, 0.10%)</title><rect x="98.7603%" y="277" width="0.1033%" height="15" fill="rgb(234,209,42)" fg:x="956" fg:w="1"/><text x="99.0103%" y="287.50"></text></g><g><title>`0x7FFB749C354A (1 samples, 0.10%)</title><rect x="98.7603%" y="261" width="0.1033%" height="15" fill="rgb(227,7,12)" fg:x="956" fg:w="1"/><text x="99.0103%" y="271.50"></text></g><g><title>`0x7FFB74A4DEF4 (1 samples, 0.10%)</title><rect x="98.7603%" y="245" width="0.1033%" height="15" fill="rgb(245,203,43)" fg:x="956" fg:w="1"/><text x="99.0103%" y="255.50"></text></g><g><title>`0x7FFB749E26C6 (1 samples, 0.10%)</title><rect x="98.8636%" y="357" width="0.1033%" height="15" fill="rgb(238,205,33)" fg:x="957" fg:w="1"/><text x="99.1136%" y="367.50"></text></g><g><title>`0x7FFB749CFB31 (4 samples, 0.41%)</title><rect x="98.6570%" y="437" width="0.4132%" height="15" fill="rgb(231,56,7)" fg:x="955" fg:w="4"/><text x="98.9070%" y="447.50"></text></g><g><title>`0x7FFB74A1C2ED (4 samples, 0.41%)</title><rect x="98.6570%" y="421" width="0.4132%" height="15" fill="rgb(244,186,29)" fg:x="955" fg:w="4"/><text x="98.9070%" y="431.50"></text></g><g><title>`0x7FFB749C4479 (4 samples, 0.41%)</title><rect x="98.6570%" y="405" width="0.4132%" height="15" fill="rgb(234,111,31)" fg:x="955" fg:w="4"/><text x="98.9070%" y="415.50"></text></g><g><title>`0x7FFB749C4C14 (3 samples, 0.31%)</title><rect x="98.7603%" y="389" width="0.3099%" height="15" fill="rgb(241,149,10)" fg:x="956" fg:w="3"/><text x="99.0103%" y="399.50"></text></g><g><title>`0x7FFB749C7BC4 (2 samples, 0.21%)</title><rect x="98.8636%" y="373" width="0.2066%" height="15" fill="rgb(249,206,44)" fg:x="957" fg:w="2"/><text x="99.1136%" y="383.50"></text></g><g><title>`0x7FFB749E279B (1 samples, 0.10%)</title><rect x="98.9669%" y="357" width="0.1033%" height="15" fill="rgb(251,153,30)" fg:x="958" fg:w="1"/><text x="99.2169%" y="367.50"></text></g><g><title>`0x7FFB74A1D21C (1 samples, 0.10%)</title><rect x="99.0702%" y="373" width="0.1033%" height="15" fill="rgb(239,152,38)" fg:x="959" fg:w="1"/><text x="99.3202%" y="383.50"></text></g><g><title>`0x7FFB74A508E4 (1 samples, 0.10%)</title><rect x="99.0702%" y="357" width="0.1033%" height="15" fill="rgb(249,139,47)" fg:x="959" fg:w="1"/><text x="99.3202%" y="367.50"></text></g><g><title>`0x7FFB72608D37 (1 samples, 0.10%)</title><rect x="99.1736%" y="341" width="0.1033%" height="15" fill="rgb(244,64,35)" fg:x="960" fg:w="1"/><text x="99.4236%" y="351.50"></text></g><g><title>`0x7FFB7264D6C2 (1 samples, 0.10%)</title><rect x="99.1736%" y="325" width="0.1033%" height="15" fill="rgb(216,46,15)" fg:x="960" fg:w="1"/><text x="99.4236%" y="335.50"></text></g><g><title>`0x7FFB7264CA0E (1 samples, 0.10%)</title><rect x="99.1736%" y="309" width="0.1033%" height="15" fill="rgb(250,74,19)" fg:x="960" fg:w="1"/><text x="99.4236%" y="319.50"></text></g><g><title>`0x7FFB7264AE7D (1 samples, 0.10%)</title><rect x="99.1736%" y="293" width="0.1033%" height="15" fill="rgb(249,42,33)" fg:x="960" fg:w="1"/><text x="99.4236%" y="303.50"></text></g><g><title>`0x7FFB7264AB08 (1 samples, 0.10%)</title><rect x="99.1736%" y="277" width="0.1033%" height="15" fill="rgb(242,149,17)" fg:x="960" fg:w="1"/><text x="99.4236%" y="287.50"></text></g><g><title>`0x7FFB7264B80A (1 samples, 0.10%)</title><rect x="99.1736%" y="261" width="0.1033%" height="15" fill="rgb(244,29,21)" fg:x="960" fg:w="1"/><text x="99.4236%" y="271.50"></text></g><g><title>`0x7FFB7264AD21 (1 samples, 0.10%)</title><rect x="99.1736%" y="245" width="0.1033%" height="15" fill="rgb(220,130,37)" fg:x="960" fg:w="1"/><text x="99.4236%" y="255.50"></text></g><g><title>`0x7FFB7264D32E (1 samples, 0.10%)</title><rect x="99.1736%" y="229" width="0.1033%" height="15" fill="rgb(211,67,2)" fg:x="960" fg:w="1"/><text x="99.4236%" y="239.50"></text></g><g><title>`0x7FFB7261D48C (1 samples, 0.10%)</title><rect x="99.1736%" y="213" width="0.1033%" height="15" fill="rgb(235,68,52)" fg:x="960" fg:w="1"/><text x="99.4236%" y="223.50"></text></g><g><title>`0x7FFB74A4ECE4 (1 samples, 0.10%)</title><rect x="99.1736%" y="197" width="0.1033%" height="15" fill="rgb(246,142,3)" fg:x="960" fg:w="1"/><text x="99.4236%" y="207.50"></text></g><g><title>`0x7FFB74A837CE (7 samples, 0.72%)</title><rect x="98.6570%" y="485" width="0.7231%" height="15" fill="rgb(241,25,7)" fg:x="955" fg:w="7"/><text x="98.9070%" y="495.50"></text></g><g><title>`0x7FFB749C6AF4 (7 samples, 0.72%)</title><rect x="98.6570%" y="469" width="0.7231%" height="15" fill="rgb(242,119,39)" fg:x="955" fg:w="7"/><text x="98.9070%" y="479.50"></text></g><g><title>`0x7FFB749C73E4 (7 samples, 0.72%)</title><rect x="98.6570%" y="453" width="0.7231%" height="15" fill="rgb(241,98,45)" fg:x="955" fg:w="7"/><text x="98.9070%" y="463.50"></text></g><g><title>`0x7FFB749CFBAE (3 samples, 0.31%)</title><rect x="99.0702%" y="437" width="0.3099%" height="15" fill="rgb(254,28,30)" fg:x="959" fg:w="3"/><text x="99.3202%" y="447.50"></text></g><g><title>`0x7FFB749ED947 (3 samples, 0.31%)</title><rect x="99.0702%" y="421" width="0.3099%" height="15" fill="rgb(241,142,54)" fg:x="959" fg:w="3"/><text x="99.3202%" y="431.50"></text></g><g><title>`0x7FFB74A1D110 (3 samples, 0.31%)</title><rect x="99.0702%" y="405" width="0.3099%" height="15" fill="rgb(222,85,15)" fg:x="959" fg:w="3"/><text x="99.3202%" y="415.50"></text></g><g><title>`0x7FFB74A1D08A (3 samples, 0.31%)</title><rect x="99.0702%" y="389" width="0.3099%" height="15" fill="rgb(210,85,47)" fg:x="959" fg:w="3"/><text x="99.3202%" y="399.50"></text></g><g><title>`0x7FFB74A1D2F7 (2 samples, 0.21%)</title><rect x="99.1736%" y="373" width="0.2066%" height="15" fill="rgb(224,206,25)" fg:x="960" fg:w="2"/><text x="99.4236%" y="383.50"></text></g><g><title>`0x7FFB749C9A1D (2 samples, 0.21%)</title><rect x="99.1736%" y="357" width="0.2066%" height="15" fill="rgb(243,201,19)" fg:x="960" fg:w="2"/><text x="99.4236%" y="367.50"></text></g><g><title>`0x7FFB72608D3E (1 samples, 0.10%)</title><rect x="99.2769%" y="341" width="0.1033%" height="15" fill="rgb(236,59,4)" fg:x="961" fg:w="1"/><text x="99.5269%" y="351.50"></text></g><g><title>`0x7FFB7264DEB7 (1 samples, 0.10%)</title><rect x="99.2769%" y="325" width="0.1033%" height="15" fill="rgb(254,179,45)" fg:x="961" fg:w="1"/><text x="99.5269%" y="335.50"></text></g><g><title>`0x7FFB7266A344 (1 samples, 0.10%)</title><rect x="99.2769%" y="309" width="0.1033%" height="15" fill="rgb(226,14,10)" fg:x="961" fg:w="1"/><text x="99.5269%" y="319.50"></text></g><g><title>`0x7FFB7264FA35 (1 samples, 0.10%)</title><rect x="99.2769%" y="293" width="0.1033%" height="15" fill="rgb(244,27,41)" fg:x="961" fg:w="1"/><text x="99.5269%" y="303.50"></text></g><g><title>`0x7FFB7265BCD0 (1 samples, 0.10%)</title><rect x="99.2769%" y="277" width="0.1033%" height="15" fill="rgb(235,35,32)" fg:x="961" fg:w="1"/><text x="99.5269%" y="287.50"></text></g><g><title>`0x7FFB7265BF18 (1 samples, 0.10%)</title><rect x="99.2769%" y="261" width="0.1033%" height="15" fill="rgb(218,68,31)" fg:x="961" fg:w="1"/><text x="99.5269%" y="271.50"></text></g><g><title>`0x7FFB7261EE77 (1 samples, 0.10%)</title><rect x="99.2769%" y="245" width="0.1033%" height="15" fill="rgb(207,120,37)" fg:x="961" fg:w="1"/><text x="99.5269%" y="255.50"></text></g><g><title>`0x7FFB749FA496 (1 samples, 0.10%)</title><rect x="99.2769%" y="229" width="0.1033%" height="15" fill="rgb(227,98,0)" fg:x="961" fg:w="1"/><text x="99.5269%" y="239.50"></text></g><g><title>`0x7FFB74A4D734 (1 samples, 0.10%)</title><rect x="99.2769%" y="213" width="0.1033%" height="15" fill="rgb(207,7,3)" fg:x="961" fg:w="1"/><text x="99.5269%" y="223.50"></text></g><g><title>`0x7FFB74A8389D (1 samples, 0.10%)</title><rect x="99.3802%" y="485" width="0.1033%" height="15" fill="rgb(206,98,19)" fg:x="962" fg:w="1"/><text x="99.6302%" y="495.50"></text></g><g><title>`0x7FFB749C70A6 (1 samples, 0.10%)</title><rect x="99.3802%" y="469" width="0.1033%" height="15" fill="rgb(217,5,26)" fg:x="962" fg:w="1"/><text x="99.6302%" y="479.50"></text></g><g><title>`0x7FFB749C01FD (1 samples, 0.10%)</title><rect x="99.3802%" y="453" width="0.1033%" height="15" fill="rgb(235,190,38)" fg:x="962" fg:w="1"/><text x="99.6302%" y="463.50"></text></g><g><title>`0x7FFB749C0446 (1 samples, 0.10%)</title><rect x="99.3802%" y="437" width="0.1033%" height="15" fill="rgb(247,86,24)" fg:x="962" fg:w="1"/><text x="99.6302%" y="447.50"></text></g><g><title>`0x7FFB749E1CD7 (1 samples, 0.10%)</title><rect x="99.3802%" y="421" width="0.1033%" height="15" fill="rgb(205,101,16)" fg:x="962" fg:w="1"/><text x="99.6302%" y="431.50"></text></g><g><title>`0x7FFB74A83A2D (1 samples, 0.10%)</title><rect x="99.4835%" y="485" width="0.1033%" height="15" fill="rgb(246,168,33)" fg:x="963" fg:w="1"/><text x="99.7335%" y="495.50"></text></g><g><title>`0x7FFB726832D9 (1 samples, 0.10%)</title><rect x="99.4835%" y="469" width="0.1033%" height="15" fill="rgb(231,114,1)" fg:x="963" fg:w="1"/><text x="99.7335%" y="479.50"></text></g><g><title>`0x7FFB726E23B5 (1 samples, 0.10%)</title><rect x="99.4835%" y="453" width="0.1033%" height="15" fill="rgb(207,184,53)" fg:x="963" fg:w="1"/><text x="99.7335%" y="463.50"></text></g><g><title>`0x7FFB74A4D7D4 (1 samples, 0.10%)</title><rect x="99.4835%" y="437" width="0.1033%" height="15" fill="rgb(224,95,51)" fg:x="963" fg:w="1"/><text x="99.7335%" y="447.50"></text></g><g><title>`0x7FFB749C4AAA (1 samples, 0.10%)</title><rect x="99.5868%" y="421" width="0.1033%" height="15" fill="rgb(212,188,45)" fg:x="964" fg:w="1"/><text x="99.8368%" y="431.50"></text></g><g><title>`0x7FFB749C4D42 (1 samples, 0.10%)</title><rect x="99.5868%" y="405" width="0.1033%" height="15" fill="rgb(223,154,38)" fg:x="964" fg:w="1"/><text x="99.8368%" y="415.50"></text></g><g><title>`0x7FFB74A4D9F4 (1 samples, 0.10%)</title><rect x="99.5868%" y="389" width="0.1033%" height="15" fill="rgb(251,22,52)" fg:x="964" fg:w="1"/><text x="99.8368%" y="399.50"></text></g><g><title>`0x7FFB74A83B6D (2 samples, 0.21%)</title><rect x="99.5868%" y="485" width="0.2066%" height="15" fill="rgb(229,209,22)" fg:x="964" fg:w="2"/><text x="99.8368%" y="495.50"></text></g><g><title>`0x7FFB749C7B29 (2 samples, 0.21%)</title><rect x="99.5868%" y="469" width="0.2066%" height="15" fill="rgb(234,138,34)" fg:x="964" fg:w="2"/><text x="99.8368%" y="479.50"></text></g><g><title>`0x7FFB749C88A8 (2 samples, 0.21%)</title><rect x="99.5868%" y="453" width="0.2066%" height="15" fill="rgb(212,95,11)" fg:x="964" fg:w="2"/><text x="99.8368%" y="463.50"></text></g><g><title>`0x7FFB749C4479 (2 samples, 0.21%)</title><rect x="99.5868%" y="437" width="0.2066%" height="15" fill="rgb(240,179,47)" fg:x="964" fg:w="2"/><text x="99.8368%" y="447.50"></text></g><g><title>`0x7FFB749C4C14 (1 samples, 0.10%)</title><rect x="99.6901%" y="421" width="0.1033%" height="15" fill="rgb(240,163,11)" fg:x="965" fg:w="1"/><text x="99.9401%" y="431.50"></text></g><g><title>`0x7FFB749C7BA2 (1 samples, 0.10%)</title><rect x="99.6901%" y="405" width="0.1033%" height="15" fill="rgb(236,37,12)" fg:x="965" fg:w="1"/><text x="99.9401%" y="415.50"></text></g><g><title>`0x7FFB749BF49F (1 samples, 0.10%)</title><rect x="99.6901%" y="389" width="0.1033%" height="15" fill="rgb(232,164,16)" fg:x="965" fg:w="1"/><text x="99.9401%" y="399.50"></text></g><g><title>`0x7FFB749C2A66 (1 samples, 0.10%)</title><rect x="99.6901%" y="373" width="0.1033%" height="15" fill="rgb(244,205,15)" fg:x="965" fg:w="1"/><text x="99.9401%" y="383.50"></text></g><g><title>`0x7FFB749C2BD9 (1 samples, 0.10%)</title><rect x="99.6901%" y="357" width="0.1033%" height="15" fill="rgb(223,117,47)" fg:x="965" fg:w="1"/><text x="99.9401%" y="367.50"></text></g><g><title>`0x7FFB74A50304 (1 samples, 0.10%)</title><rect x="99.6901%" y="341" width="0.1033%" height="15" fill="rgb(244,107,35)" fg:x="965" fg:w="1"/><text x="99.9401%" y="351.50"></text></g><g><title>`0x7FFB74A25DEB (16 samples, 1.65%)</title><rect x="98.2438%" y="501" width="1.6529%" height="15" fill="rgb(205,140,8)" fg:x="951" fg:w="16"/><text x="98.4938%" y="511.50"></text></g><g><title>`0x7FFB74A83CB2 (1 samples, 0.10%)</title><rect x="99.7934%" y="485" width="0.1033%" height="15" fill="rgb(228,84,46)" fg:x="966" fg:w="1"/><text x="100.0434%" y="495.50"></text></g><g><title>`0x7FFB74A1D110 (1 samples, 0.10%)</title><rect x="99.7934%" y="469" width="0.1033%" height="15" fill="rgb(254,188,9)" fg:x="966" fg:w="1"/><text x="100.0434%" y="479.50"></text></g><g><title>`0x7FFB74A1D110 (1 samples, 0.10%)</title><rect x="99.7934%" y="453" width="0.1033%" height="15" fill="rgb(206,112,54)" fg:x="966" fg:w="1"/><text x="100.0434%" y="463.50"></text></g><g><title>`0x7FFB74A1D08A (1 samples, 0.10%)</title><rect x="99.7934%" y="437" width="0.1033%" height="15" fill="rgb(216,84,49)" fg:x="966" fg:w="1"/><text x="100.0434%" y="447.50"></text></g><g><title>`0x7FFB74A1D2F7 (1 samples, 0.10%)</title><rect x="99.7934%" y="421" width="0.1033%" height="15" fill="rgb(214,194,35)" fg:x="966" fg:w="1"/><text x="100.0434%" y="431.50"></text></g><g><title>`0x7FFB749C9A1D (1 samples, 0.10%)</title><rect x="99.7934%" y="405" width="0.1033%" height="15" fill="rgb(249,28,3)" fg:x="966" fg:w="1"/><text x="100.0434%" y="415.50"></text></g><g><title>`0x7FFB72416216 (1 samples, 0.10%)</title><rect x="99.7934%" y="389" width="0.1033%" height="15" fill="rgb(222,56,52)" fg:x="966" fg:w="1"/><text x="100.0434%" y="399.50"></text></g><g><title>`0x7FFB72417730 (1 samples, 0.10%)</title><rect x="99.7934%" y="373" width="0.1033%" height="15" fill="rgb(245,217,50)" fg:x="966" fg:w="1"/><text x="100.0434%" y="383.50"></text></g><g><title>`0x7FFB7240710E (1 samples, 0.10%)</title><rect x="99.7934%" y="357" width="0.1033%" height="15" fill="rgb(213,201,24)" fg:x="966" fg:w="1"/><text x="100.0434%" y="367.50"></text></g><g><title>`0x7FFB72407214 (1 samples, 0.10%)</title><rect x="99.7934%" y="341" width="0.1033%" height="15" fill="rgb(248,116,28)" fg:x="966" fg:w="1"/><text x="100.0434%" y="351.50"></text></g><g><title>`0x7FFB724076CC (1 samples, 0.10%)</title><rect x="99.7934%" y="325" width="0.1033%" height="15" fill="rgb(219,72,43)" fg:x="966" fg:w="1"/><text x="100.0434%" y="335.50"></text></g><g><title>`0x7FFB72407980 (1 samples, 0.10%)</title><rect x="99.7934%" y="309" width="0.1033%" height="15" fill="rgb(209,138,14)" fg:x="966" fg:w="1"/><text x="100.0434%" y="319.50"></text></g><g><title>`0x7FFB72407B11 (1 samples, 0.10%)</title><rect x="99.7934%" y="293" width="0.1033%" height="15" fill="rgb(222,18,33)" fg:x="966" fg:w="1"/><text x="100.0434%" y="303.50"></text></g><g><title>`0x7FFB72407F07 (1 samples, 0.10%)</title><rect x="99.7934%" y="277" width="0.1033%" height="15" fill="rgb(213,199,7)" fg:x="966" fg:w="1"/><text x="100.0434%" y="287.50"></text></g><g><title>`0x7FFB72408137 (1 samples, 0.10%)</title><rect x="99.7934%" y="261" width="0.1033%" height="15" fill="rgb(250,110,10)" fg:x="966" fg:w="1"/><text x="100.0434%" y="271.50"></text></g><g><title>`0x7FFB725D2E2B (1 samples, 0.10%)</title><rect x="99.7934%" y="245" width="0.1033%" height="15" fill="rgb(248,123,6)" fg:x="966" fg:w="1"/><text x="100.0434%" y="255.50"></text></g><g><title>`0x7FFB725C5A79 (1 samples, 0.10%)</title><rect x="99.7934%" y="229" width="0.1033%" height="15" fill="rgb(206,91,31)" fg:x="966" fg:w="1"/><text x="100.0434%" y="239.50"></text></g><g><title>`0x7FFB725C5D12 (1 samples, 0.10%)</title><rect x="99.7934%" y="213" width="0.1033%" height="15" fill="rgb(211,154,13)" fg:x="966" fg:w="1"/><text x="100.0434%" y="223.50"></text></g><g><title>`0x7FFB74A4D734 (1 samples, 0.10%)</title><rect x="99.7934%" y="197" width="0.1033%" height="15" fill="rgb(225,148,7)" fg:x="966" fg:w="1"/><text x="100.0434%" y="207.50"></text></g><g><title>all (968 samples, 100%)</title><rect x="0.0000%" y="549" width="100.0000%" height="15" fill="rgb(220,160,43)" fg:x="0" fg:w="968"/><text x="0.2500%" y="559.50"></text></g><g><title>`0x7FFB74A25C1E (17 samples, 1.76%)</title><rect x="98.2438%" y="533" width="1.7562%" height="15" fill="rgb(213,52,39)" fg:x="951" fg:w="17"/><text x="98.4938%" y="543.50"></text></g><g><title>`0x7FFB74A25C73 (17 samples, 1.76%)</title><rect x="98.2438%" y="517" width="1.7562%" height="15" fill="rgb(243,137,7)" fg:x="951" fg:w="17"/><text x="98.4938%" y="527.50"></text></g><g><title>`0x7FFB74A25EB9 (1 samples, 0.10%)</title><rect x="99.8967%" y="501" width="0.1033%" height="15" fill="rgb(230,79,13)" fg:x="967" fg:w="1"/><text x="100.1467%" y="511.50"></text></g><g><title>`0x7FFB74A2F9DF (1 samples, 0.10%)</title><rect x="99.8967%" y="485" width="0.1033%" height="15" fill="rgb(247,105,23)" fg:x="967" fg:w="1"/><text x="100.1467%" y="495.50"></text></g><g><title>`0x7FFB749BF08A (1 samples, 0.10%)</title><rect x="99.8967%" y="469" width="0.1033%" height="15" fill="rgb(223,179,41)" fg:x="967" fg:w="1"/><text x="100.1467%" y="479.50"></text></g><g><title>`0x7FFB749C09B8 (1 samples, 0.10%)</title><rect x="99.8967%" y="453" width="0.1033%" height="15" fill="rgb(218,9,34)" fg:x="967" fg:w="1"/><text x="100.1467%" y="463.50"></text></g><g><title>`0x7FFB749C0A4B (1 samples, 0.10%)</title><rect x="99.8967%" y="437" width="0.1033%" height="15" fill="rgb(222,106,8)" fg:x="967" fg:w="1"/><text x="100.1467%" y="447.50"></text></g><g><title>`0x7FFB74A50904 (1 samples, 0.10%)</title><rect x="99.8967%" y="421" width="0.1033%" height="15" fill="rgb(211,220,0)" fg:x="967" fg:w="1"/><text x="100.1467%" y="431.50"></text></g></svg></svg>